import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { MessageCircle, X, Send, Loader2 } from 'lucide-react';

export default function Chatbot() {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Array<{ type: 'user' | 'bot'; text: string }>>([
    { type: 'bot', text: 'Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n v·ªÅ ti·ªÅn ·∫£o, v√≠ ƒëi·ªán t·ª≠ v√† ng√¢n h√†ng s·ªë?' },
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  // Database responses th√¥ng minh cho c√°c ch·ªß ƒë·ªÅ
  const responses: Record<string, string> = {
    'bitcoin': 'Bitcoin l√† lo·∫°i ti·ªÅn ƒëi·ªán t·ª≠ ƒë·∫ßu ti√™n, ƒë∆∞·ª£c t·∫°o ra nƒÉm 2009 b·ªüi Satoshi Nakamoto. N√≥ ho·∫°t ƒë·ªông tr√™n c√¥ng ngh·ªá blockchain v√† c√≥ t√≠nh phi t·∫≠p trung, kh√¥ng c·∫ßn ng√¢n h√†ng trung ∆∞∆°ng.',
    'ethereum': 'Ethereum l√† n·ªÅn t·∫£ng blockchain th·∫ø h·ªá th·ª© hai, cho ph√©p t·∫°o ra c√°c ·ª©ng d·ª•ng phi t·∫≠p trung (DApps) v√† smart contracts. ETH l√† token g·ªëc c·ªßa m·∫°ng Ethereum.',
    'blockchain': 'Blockchain l√† c√¥ng ngh·ªá s·ªï c√°i ph√¢n t√°n, ghi l·∫°i c√°c giao d·ªãch m·ªôt c√°ch an to√†n v√† minh b·∫°ch. M·ªói kh·ªëi ch·ª©a th√¥ng tin v·ªÅ giao d·ªãch v√† ƒë∆∞·ª£c li√™n k·∫øt v·ªõi kh·ªëi tr∆∞·ªõc ƒë√≥.',
    'v√≠ ƒëi·ªán t·ª≠': 'V√≠ ƒëi·ªán t·ª≠ l√† ·ª©ng d·ª•ng cho ph√©p l∆∞u tr·ªØ, g·ª≠i v√† nh·∫≠n ti·ªÅn ƒëi·ªán t·ª≠. C√≥ hai lo·∫°i ch√≠nh: v√≠ n√≥ng (k·∫øt n·ªëi internet) v√† v√≠ l·∫°nh (offline). V√≠ d·ª•: MetaMask, Trust Wallet, Ledger.',
    'ng√¢n h√†ng s·ªë': 'Ng√¢n h√†ng s·ªë l√† ng√¢n h√†ng ho·∫°t ƒë·ªông ho√†n to√†n tr√™n n·ªÅn t·∫£ng k·ªπ thu·∫≠t s·ªë, kh√¥ng c√≥ chi nh√°nh v·∫≠t l√Ω. Cung c·∫•p d·ªãch v·ª• ng√¢n h√†ng 24/7 qua ·ª©ng d·ª•ng di ƒë·ªông v√† web.',
    'cbdc': 'CBDC (Central Bank Digital Currency) l√† ti·ªÅn k·ªπ thu·∫≠t s·ªë do ng√¢n h√†ng trung ∆∞∆°ng ph√°t h√†nh. Kh√°c v·ªõi ti·ªÅn ƒëi·ªán t·ª≠ phi t·∫≠p trung, CBDC ƒë∆∞·ª£c ki·ªÉm so√°t b·ªüi ch√≠nh ph·ªß.',
    'defi': 'DeFi (Decentralized Finance) l√† h·ªá th·ªëng t√†i ch√≠nh phi t·∫≠p trung, cho ph√©p ng∆∞·ªùi d√πng giao d·ªãch, cho vay, ƒëi vay m√† kh√¥ng c·∫ßn trung gian nh∆∞ ng√¢n h√†ng truy·ªÅn th·ªëng.',
    'nft': 'NFT (Non-Fungible Token) l√† token kh√¥ng th·ªÉ thay th·∫ø, ƒë·∫°i di·ªán cho quy·ªÅn s·ªü h·ªØu duy nh·∫•t c·ªßa m·ªôt t√†i s·∫£n k·ªπ thu·∫≠t s·ªë nh∆∞ ngh·ªá thu·∫≠t, √¢m nh·∫°c, ho·∫∑c b·∫•t ƒë·ªông s·∫£n ·∫£o.',
    's√†n giao d·ªãch': 'S√†n giao d·ªãch ti·ªÅn ƒëi·ªán t·ª≠ l√† n·ªÅn t·∫£ng cho ph√©p mua b√°n, trao ƒë·ªïi c√°c lo·∫°i ti·ªÅn ƒëi·ªán t·ª≠. V√≠ d·ª•: Binance, Coinbase, Kraken. C·∫ßn ch√∫ √Ω ƒë·∫øn b·∫£o m·∫≠t v√† ph√≠ giao d·ªãch.',
    'thanh to√°n s·ªë': 'Thanh to√°n s·ªë bao g·ªìm c√°c ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng d√πng ti·ªÅn m·∫∑t nh∆∞ v√≠ ƒëi·ªán t·ª≠ (Momo, ZaloPay), th·∫ª ng√¢n h√†ng, QR code, v√† c√°c c√¥ng ngh·ªá m·ªõi nh∆∞ NFC.',
    'smart contract': 'Smart contract l√† h·ª£p ƒë·ªìng t·ª± ƒë·ªông th·ª±c thi khi ƒë√°p ·ª©ng c√°c ƒëi·ªÅu ki·ªán ƒë∆∞·ª£c l·∫≠p tr√¨nh s·∫µn. Ch√∫ng ch·∫°y tr√™n blockchain v√† kh√¥ng c·∫ßn b√™n th·ª© ba ƒë·ªÉ th·ª±c thi.',
    'web3': 'Web3 l√† th·∫ø h·ªá ti·∫øp theo c·ªßa internet, t·∫≠p trung v√†o t√≠nh phi t·∫≠p trung, quy·ªÅn s·ªü h·ªØu d·ªØ li·ªáu c·ªßa ng∆∞·ªùi d√πng, v√† s·ª≠ d·ª•ng blockchain ƒë·ªÉ t·∫°o ra c√°c ·ª©ng d·ª•ng d√¢n ch·ªß h∆°n.',
    'b·∫£o m·∫≠t': 'B·∫£o m·∫≠t trong crypto bao g·ªìm: s·ª≠ d·ª•ng v√≠ c·ª©ng, kh√¥ng chia s·∫ª private key, x√°c th·ª±c 2FA, ki·ªÉm tra ƒë·ªãa ch·ªâ v√≠ tr∆∞·ªõc khi g·ª≠i ti·ªÅn, v√† c·∫©n th·∫≠n v·ªõi c√°c scam/phishing.',
    'quy ƒë·ªãnh': 'Quy ƒë·ªãnh v·ªÅ crypto ƒëang ƒë∆∞·ª£c c√°c qu·ªëc gia x√¢y d·ª±ng. M·ªôt s·ªë n∆∞·ªõc ƒë√£ h·ª£p ph√°p h√≥a Bitcoin, m·ªôt s·ªë c·∫•m ho√†n to√†n. C·∫ßn tu√¢n th·ªß lu·∫≠t ph√°p ƒë·ªãa ph∆∞∆°ng khi ƒë·∫ßu t∆∞.',
    'l·ªãch s·ª≠': 'L·ªãch s·ª≠ ti·ªÅn t·ªá: t·ª´ h√†ng h√≥a (v·ªè s√≤, v√†ng) ‚Üí ti·ªÅn xu ‚Üí ti·ªÅn gi·∫•y ‚Üí ti·ªÅn ƒëi·ªán t·ª≠. Bitcoin m·ªü ra k·ª∑ nguy√™n ti·ªÅn t·ªá s·ªë h√≥a phi t·∫≠p trung.',
    't∆∞∆°ng lai': 'T∆∞∆°ng lai c·ªßa ti·ªÅn t·ªá s·∫Ω l√† s·ª± k·∫øt h·ª£p gi·ªØa ti·ªÅn fiat truy·ªÅn th·ªëng v√† ti·ªÅn ƒëi·ªán t·ª≠. CBDC s·∫Ω ph·ªï bi·∫øn, DeFi s·∫Ω thay th·∫ø m·ªôt ph·∫ßn h·ªá th·ªëng t√†i ch√≠nh truy·ªÅn th·ªëng.',
  };
  const keywordSuggestions = [
    'Bitcoin v√† Ethereum',
    'Blockchain v√† c√¥ng ngh·ªá s·ªï c√°i ph√¢n t√°n',
    'V√≠ ƒëi·ªán t·ª≠ v√† v√≠ crypto',
    'Ng√¢n h√†ng s·ªë v√† fintech',
    'CBDC - Ti·ªÅn k·ªπ thu·∫≠t s·ªë ng√¢n h√†ng trung ∆∞∆°ng',
    'DeFi - T√†i ch√≠nh phi t·∫≠p trung',
    'NFT v√† token',
    'S√†n giao d·ªãch ti·ªÅn ƒëi·ªán t·ª≠',
    'Thanh to√°n s·ªë v√† payment gateway',
    'Smart contract v√† DApp',
    'Web3 v√† metaverse',
    'Quy ƒë·ªãnh ph√°p l√Ω v·ªÅ crypto',
    'B·∫£o m·∫≠t v√† ri√™ng t∆∞ trong crypto'
  ];


  // Logic t√¨m ki·∫øm th√¥ng minh
  const findBestResponse = (question: string): string => {
    const lowerQuestion = question.toLowerCase();
    
    // T√¨m t·ª´ kh√≥a ph√π h·ª£p nh·∫•t
    for (const [keyword, response] of Object.entries(responses)) {
      if (lowerQuestion.includes(keyword.toLowerCase())) {
        return response;
      }
    }
    
    // Ki·ªÉm tra c√°c t·ª´ kh√≥a ph·ª•
    const relatedKeywords = {
      'ti·ªÅn ·∫£o': 'bitcoin',
      'crypto': 'bitcoin', 
      'ti·ªÅn ƒëi·ªán t·ª≠': 'bitcoin',
      'coin': 'bitcoin',
      'altcoin': 'ethereum',
      'eth': 'ethereum',
      'dapp': 'smart contract',
      'h·ª£p ƒë·ªìng th√¥ng minh': 'smart contract',
      'fintech': 'ng√¢n h√†ng s·ªë',
      'digital banking': 'ng√¢n h√†ng s·ªë',
      'payment': 'thanh to√°n s·ªë',
      'giao d·ªãch': 's√†n giao d·ªãch',
      'trading': 's√†n giao d·ªãch',
      'exchange': 's√†n giao d·ªãch',
      'token': 'nft',
      'digital art': 'nft',
      'metaverse': 'web3',
      'internet': 'web3',
      'security': 'b·∫£o m·∫≠t',
      'privacy': 'b·∫£o m·∫≠t',
      'regulation': 'quy ƒë·ªãnh',
      'legal': 'quy ƒë·ªãnh',
      'history': 'l·ªãch s·ª≠',
      'evolution': 'l·ªãch s·ª≠',
      'future': 't∆∞∆°ng lai',
      'trend': 't∆∞∆°ng lai'
    };
    
    for (const [key, mappedKey] of Object.entries(relatedKeywords)) {
      if (lowerQuestion.includes(key)) {
        return responses[mappedKey];
      }
    }
    
    // N·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ g·ª£i √Ω
    return 'T√¥i ch·ªâ c√≥ th·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi d·ª±a tr√™n nh·ªØng t·ª´ kh√≥a sau: Bitcoin, Ethereum, blockchain, v√≠ ƒëi·ªán t·ª≠, ng√¢n h√†ng s·ªë, CBDC, DeFi, NFT, s√†n giao d·ªãch, thanh to√°n s·ªë, smart contract, Web3, quy ƒë·ªãnh ph√°p l√Ω, b·∫£o m·∫≠t v√† ri√™ng t∆∞ trong crypto.';
  };

  const handleSend = () => {
    if (!input.trim() || isLoading) return;

    const userMessage = { type: 'user' as const, text: input };
    setMessages((prev) => [...prev, userMessage]);
    setIsLoading(true);

    // Simulate AI thinking time
    setTimeout(() => {
      const response = findBestResponse(input);
      setMessages((prev) => [...prev, { type: 'bot', text: response }]);
      setIsLoading(false);
    }, 800);

    setInput('');
  };

  return (
    <>
      <motion.button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-6 right-6 bg-blue-600 text-white p-4 rounded-full shadow-lg z-50"
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
        initial={{ scale: 0 }}
        animate={{ scale: 1 }}
      >
        <MessageCircle className="w-6 h-6" />
      </motion.button>

      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, y: 20, scale: 0.9 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 20, scale: 0.9 }}
            className="fixed bottom-24 right-6 w-96 max-w-[calc(100vw-3rem)] bg-white rounded-lg shadow-2xl z-50 overflow-hidden"
          >
            <div className="bg-blue-600 text-white p-4 flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Coins className="w-5 h-5 text-amber-300" />
                <span className="font-semibold">Tr·ª£ l√Ω Ti·ªÅn t·ªá</span>
                <div className="w-2 h-2 bg-green-400 rounded-full"></div>
              </div>
              <button 
                onClick={() => setIsOpen(false)} 
                className="hover:bg-blue-700 p-1 rounded"
                title="ƒê√≥ng chatbot"
                aria-label="ƒê√≥ng chatbot"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            <div className="h-96 overflow-y-auto p-4 bg-slate-50">
              {messages.map((msg, idx) => (
                <motion.div
                  key={idx}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className={`mb-3 flex ${msg.type === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-[80%] p-3 rounded-lg ${
                      msg.type === 'user'
                        ? 'bg-blue-600 text-white rounded-br-none'
                        : 'bg-white text-slate-800 rounded-bl-none shadow'
                    }`}
                  >
                    {msg.text}
                  </div>
                </motion.div>
              ))}
              
              {/* G·ª£i √Ω t·ª´ kh√≥a khi ch∆∞a c√≥ tin nh·∫Øn n√†o */}
              {messages.length === 1 && (
                <motion.div
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="mt-4"
                >
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                    <h4 className="text-sm font-semibold text-blue-800 mb-2">
                      üí° G·ª£i √Ω c√°c ch·ªß ƒë·ªÅ b·∫°n c√≥ th·ªÉ h·ªèi:
                    </h4>
                    <div className="flex flex-wrap gap-1">
                      {keywordSuggestions.slice(0, 6).map((suggestion, idx) => (
                        <span
                          key={idx}
                          className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded-full cursor-pointer hover:bg-blue-200 transition-colors"
                          onClick={() => setInput(suggestion)}
                        >
                          {suggestion}
                        </span>
                      ))}
                    </div>
                  </div>
                </motion.div>
              )}
              
              {/* Loading indicator */}
              {isLoading && (
                <motion.div
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="mb-3 flex justify-start"
                >
                  <div className="bg-white text-slate-800 rounded-lg rounded-bl-none shadow p-3 flex items-center gap-2">
                    <Loader2 className="w-4 h-4 animate-spin" />
                    <span>ƒêang x·ª≠ l√Ω...</span>
                  </div>
                </motion.div>
              )}
            </div>

            <div className="p-4 border-t bg-white">
              <div className="flex gap-2">
                <input
                  type="text"
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleSend()}
                  placeholder="Nh·∫≠p c√¢u h·ªèi..."
                  disabled={isLoading}
                  className={`flex-1 px-3 py-2 border rounded-lg focus:outline-none ${
                    isLoading
                      ? 'border-gray-300 bg-gray-100 cursor-not-allowed'
                      : 'border-slate-300 focus:border-blue-500'
                  }`}
                />
                <motion.button
                  onClick={handleSend}
                  disabled={isLoading}
                  className={`p-2 rounded-lg flex items-center justify-center ${
                    isLoading
                      ? 'bg-gray-400 cursor-not-allowed' 
                      : 'bg-blue-600 hover:bg-blue-700'
                  } text-white`}
                  whileHover={!isLoading ? { scale: 1.05 } : {}}
                  whileTap={!isLoading ? { scale: 0.95 } : {}}
                >
                  {isLoading ? (
                    <Loader2 className="w-5 h-5 animate-spin" />
                  ) : (
                    <Send className="w-5 h-5" />
                  )}
                </motion.button>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
}

function Coins({ className }: { className?: string }) {
  return (
    <svg className={className} fill="currentColor" viewBox="0 0 24 24">
      <circle cx="9" cy="9" r="7" opacity="0.5" />
      <circle cx="15" cy="15" r="7" />
    </svg>
  );
}
