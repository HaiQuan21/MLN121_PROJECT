import { useState, useEffect, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Clock, Heart, Coins, Zap, Play, RotateCcw, Trophy } from 'lucide-react';
import * as Progress from '@radix-ui/react-progress';
import * as Dialog from '@radix-ui/react-dialog';

interface GameState {
  chronoCoin: number;
  matCoin: number;
  lifespan: number;
  qualityOfLife: number;
  energy: number;
  knowledge: number;
  timeLeft: number;
  gameActive: boolean;
  gameEnded: boolean;
  gameWon: boolean;
  score: number;
  powerUpsUsed: {
    fiftyFifty: boolean;
    askAudience: boolean;
    phoneFriend: boolean;
    switchQuestion: boolean;
  };
}

interface GameEvent {
  id: string;
  title: string;
  description: string;
  cost: { chronoCoin?: number; matCoin?: number };
  effect: { 
    lifespan?: number; 
    qualityOfLife?: number; 
    energy?: number; 
    knowledge?: number;
    chronoCoin?: number;
    matCoin?: number;
  };
  type: 'lifespan' | 'quality' | 'energy' | 'knowledge' | 'quiz' | 'trade' | 'mandatory' | 'lottery';
  quizQuestion?: string;
  quizOptions?: string[];
  quizAnswer?: number;
  mandatory?: boolean;
  category?: string;
}

export default function MinigamePage() {
  const [gameState, setGameState] = useState<GameState>({
    chronoCoin: 30,
    matCoin: 30,
    lifespan: 100,
    qualityOfLife: 100,
    energy: 100,
    knowledge: 100,
    timeLeft: 300, // 5 ph√∫t
    gameActive: false,
    gameEnded: false,
    gameWon: false,
    score: 0,
    powerUpsUsed: {
      fiftyFifty: false,
      askAudience: false,
      phoneFriend: false,
      switchQuestion: false
    }
  });

  const [currentEvent, setCurrentEvent] = useState<GameEvent | null>(null);
  const [showQuiz, setShowQuiz] = useState(false);
  const [quizAnswer, setQuizAnswer] = useState<number | null>(null);
  const [particles, setParticles] = useState<Array<{ id: number; x: number; y: number }>>([]);
  const [eliminatedOptions, setEliminatedOptions] = useState<number[]>([]);
  const [lotteryResult, setLotteryResult] = useState<{
    show: boolean;
    effects: { [key: string]: number | string };
    message: string;
  }>({
    show: false,
    effects: {},
    message: ''
  });
  const [showRules, setShowRules] = useState(false);
  const [modalState, setModalState] = useState<{
    show: boolean;
    type: 'askAudience' | 'phoneFriend' | null;
    data: any;
  }>({
    show: false,
    type: null,
    data: null
  });

  // Database c√°c s·ª± ki·ªán game ph·ª©c t·∫°p
  const gameEvents: GameEvent[] = [
    // Lifespan Events
    {
      id: 'medicine',
      title: 'üíä Thu·ªëc k√©o d√†i s·ª± s·ªëng',
      description: 'B·∫°n c·∫ßn thu·ªëc ƒë·ªÉ duy tr√¨ s·ª©c kh·ªèe. Tr·∫£ 8 ChronoCoin ƒë·ªÉ tƒÉng tu·ªïi th·ªç?',
      cost: { chronoCoin: 8 },
      effect: { lifespan: 20 },
      type: 'lifespan',
      category: 'Health'
    },
    {
      id: 'medical_emergency',
      title: 'üö® S·ª± c·ªë y t·∫ø',
      description: 'B·∫Øt bu·ªôc tr·∫£ 20 ChronoCoin ho·∫∑c m·∫•t 50% tu·ªïi th·ªç!',
      cost: { chronoCoin: 20 },
      effect: { lifespan: 30 },
      type: 'mandatory',
      mandatory: true,
      category: 'Emergency'
    },
    {
      id: 'exercise',
      title: 'üí™ T·∫≠p luy·ªán',
      description: 'T·∫≠p luy·ªán gi√∫p k√©o d√†i tu·ªïi th·ªç nh∆∞ng t·ªën nƒÉng l∆∞·ª£ng.',
      cost: { chronoCoin: 5 },
      effect: { lifespan: 15, energy: -10 },
      type: 'lifespan',
      category: 'Health'
    },

    // Quality of Life Events
    {
      id: 'apartment',
      title: 'üè† CƒÉn h·ªô m·ªõi',
      description: 'CƒÉn h·ªô m·ªõi c·∫ßn 15 MatCoin ƒë·ªÉ c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng s·ªëng.',
      cost: { matCoin: 15 },
      effect: { qualityOfLife: 25 },
      type: 'quality',
      category: 'Housing'
    },
    {
      id: 'food',
      title: 'üçé Th·ª©c ƒÉn dinh d∆∞·ª°ng',
      description: 'Th·ª©c ƒÉn dinh d∆∞·ª°ng gi√∫p tƒÉng c·∫£ s·ª©c kh·ªèe v√† ch·∫•t l∆∞·ª£ng s·ªëng.',
      cost: { matCoin: 10 },
      effect: { lifespan: 10, qualityOfLife: 15 },
      type: 'quality',
      category: 'Food'
    },
    {
      id: 'technology',
      title: 'üì± C√¥ng ngh·ªá m·ªõi',
      description: 'C√¥ng ngh·ªá m·ªõi gi√∫p c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng s·ªëng.',
      cost: { matCoin: 20 },
      effect: { qualityOfLife: 30 },
      type: 'quality',
      category: 'Technology'
    },

    // Energy Events
    {
      id: 'rest',
      title: 'üò¥ Ngh·ªâ ng∆°i',
      description: 'C∆° th·ªÉ m·ªát m·ªèi: Tr·∫£ 10 ChronoCoin ƒë·ªÉ tƒÉng nƒÉng l∆∞·ª£ng?',
      cost: { chronoCoin: 10 },
      effect: { energy: 20 },
      type: 'energy',
      category: 'Rest'
    },
    {
      id: 'work_stress',
      title: 'üíº CƒÉng th·∫≥ng c√¥ng vi·ªác',
      description: 'L√†m vi·ªác qu√° s·ª©c l√†m gi·∫£m nƒÉng l∆∞·ª£ng. Ngh·ªâ ng∆°i ƒë·ªÉ ph·ª•c h·ªìi?',
      cost: { chronoCoin: 8 },
      effect: { energy: 25, matCoin: 5 },
      type: 'energy',
      category: 'Work'
    },
    {
      id: 'energy_drink',
      title: '‚ö° N∆∞·ªõc tƒÉng l·ª±c',
      description: 'N∆∞·ªõc tƒÉng l·ª±c gi√∫p tƒÉng nƒÉng l∆∞·ª£ng t·∫°m th·ªùi.',
      cost: { matCoin: 12 },
      effect: { energy: 15, lifespan: -5 },
      type: 'energy',
      category: 'Consumable'
    },

    // Knowledge Events
    {
      id: 'online_course',
      title: 'üéì Kh√≥a h·ªçc tr·ª±c tuy·∫øn',
      description: 'C∆° h·ªôi h·ªçc h·ªèi: Tr·∫£ 15 MatCoin ƒë·ªÉ tƒÉng ki·∫øn th·ª©c?',
      cost: { matCoin: 15 },
      effect: { knowledge: 25 },
      type: 'knowledge',
      category: 'Education'
    },
    {
      id: 'social_network',
      title: 'üåê M·∫°ng x√£ h·ªôi tr·∫£ ph√≠',
      description: 'K·∫øt n·ªëi v·ªõi m·∫°ng l∆∞·ªõi chuy√™n nghi·ªáp ƒë·ªÉ tƒÉng ki·∫øn th·ª©c.',
      cost: { matCoin: 20 },
      effect: { knowledge: 30, energy: -5 },
      type: 'knowledge',
      category: 'Social'
    },
    {
      id: 'isolation',
      title: 'üè† C√¥ l·∫≠p x√£ h·ªôi',
      description: 'Thi·∫øu t∆∞∆°ng t√°c x√£ h·ªôi l√†m gi·∫£m ki·∫øn th·ª©c. Tham gia ho·∫°t ƒë·ªông?',
      cost: { matCoin: 10 },
      effect: { knowledge: 20, energy: -10 },
      type: 'knowledge',
      category: 'Social'
    },

    // Trade Events
    {
      id: 'trade',
      title: 'üí± Giao d·ªãch r·ªßi ro',
      description: 'ƒê·ªïi 10 ChronoCoin l·∫•y 15 MatCoin nh∆∞ng m·∫•t c∆° h·ªôi s·ªëng l√¢u h∆°n.',
      cost: { chronoCoin: 10 },
      effect: { matCoin: 15, lifespan: -5 },
      type: 'trade',
      category: 'Finance'
    },
    {
      id: 'investment',
      title: 'üìà ƒê·∫ßu t∆∞ th√¥ng minh',
      description: 'ƒê·∫ßu t∆∞ 20 MatCoin ƒë·ªÉ c√≥ c∆° h·ªôi nh·∫≠n l·∫°i nhi·ªÅu h∆°n.',
      cost: { matCoin: 20 },
      effect: { matCoin: 35, knowledge: 10 },
      type: 'trade',
      category: 'Finance'
    },

    // Lottery Events - C∆° h·ªôi hay H√¨nh ph·∫°t
    {
      id: 'mystery_box',
      title: 'üéÅ H·ªôp b√≠ ·∫©n',
      description: 'M·ªôt h·ªôp b√≠ ·∫©n xu·∫•t hi·ªán! B·∫°n c√≥ mu·ªën m·ªü n√≥ kh√¥ng?',
      cost: {},
      effect: {},
      type: 'lottery',
      category: 'Mystery'
    },
    {
      id: 'fortune_teller',
      title: 'üîÆ Th·∫ßy b√≥i',
      description: 'M·ªôt th·∫ßy b√≥i m·ªùi b·∫°n b·ªëc qu·∫ª. C∆° h·ªôi hay r·ªßi ro?',
      cost: {},
      effect: {},
      type: 'lottery',
      category: 'Mystery'
    },
    {
      id: 'lucky_draw',
      title: 'üé∞ R√∫t thƒÉm may m·∫Øn',
      description: 'Tham gia r√∫t thƒÉm may m·∫Øn! B·∫°n c√≥ d√°m th·ª≠ kh√¥ng?',
      cost: {},
      effect: {},
      type: 'lottery',
      category: 'Mystery'
    },
    {
      id: 'magic_potion',
      title: 'üß™ Thu·ªëc th·∫ßn b√≠',
      description: 'M·ªôt l·ªç thu·ªëc th·∫ßn b√≠ xu·∫•t hi·ªán. U·ªëng hay kh√¥ng u·ªëng?',
      cost: {},
      effect: {},
      type: 'lottery',
      category: 'Mystery'
    },
    {
      id: 'ancient_artifact',
      title: 'üè∫ C·ªï v·∫≠t c·ªï ƒë·∫°i',
      description: 'B·∫°n t√¨m th·∫•y m·ªôt c·ªï v·∫≠t c·ªï ƒë·∫°i. Ch·∫°m v√†o hay b·ªè qua?',
      cost: {},
      effect: {},
      type: 'lottery',
      category: 'Mystery'
    }
  ];

  // Database c√¢u h·ªèi quiz theo 4 nh√≥m
  const quizQuestions = [
    // Nh√≥m 1: L·ªãch s·ª≠ ti·ªÅn t·ªá (15 c√¢u)
    {
      id: 'history_1',
      question: 'H√¨nh th·ª©c trao ƒë·ªïi ƒë·∫ßu ti√™n trong l·ªãch s·ª≠ ti·ªÅn t·ªá l√† g√¨?',
      options: ['Ti·ªÅn gi·∫•y', 'Trao ƒë·ªïi h√†ng h√≥a (barter)', 'Ti·ªÅn xu', 'Ti·ªÅn s·ªë'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'L·ªãch s·ª≠ ti·ªÅn t·ªá'
    },
    {
      id: 'history_2',
      question: 'Lo·∫°i ti·ªÅn t·ªá ƒë·∫ßu ti√™n ƒë∆∞·ª£c s·ª≠ d·ª•ng r·ªông r√£i l√† g√¨?',
      options: ['V√†ng', 'V·ªè s√≤ (cowrie shells)', 'Ti·ªÅn gi·∫•y', 'Th·∫ª t√≠n d·ª•ng'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'L·ªãch s·ª≠ ti·ªÅn t·ªá'
    },
    {
      id: 'history_3',
      question: 'Ti·ªÅn xu ƒë·∫ßu ti√™n ƒë∆∞·ª£c ƒë√∫c ·ªü ƒë√¢u?',
      options: ['Trung Qu·ªëc', 'Ai C·∫≠p', 'Lydia (Asia Minor)', '·∫§n ƒê·ªô'],
      answer: 2,
      reward: { chronoCoin: 5 },
      category: 'L·ªãch s·ª≠ ti·ªÅn t·ªá'
    },
    {
      id: 'history_4',
      question: 'Ti·ªÅn gi·∫•y ƒë·∫ßu ti√™n ƒë∆∞·ª£c ph√°t h√†nh ·ªü ƒë√¢u?',
      options: ['Ch√¢u √Çu', 'Trung Qu·ªëc', 'M·ªπ', '·∫§n ƒê·ªô'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'L·ªãch s·ª≠ ti·ªÅn t·ªá'
    },
    {
      id: 'history_5',
      question: 'S·ª± ki·ªán n√†o ƒë√°nh d·∫•u s·ª± ra ƒë·ªùi c·ªßa ƒë·ªìng ƒë√¥ la M·ªπ?',
      options: ['Tuy√™n ng√¥n ƒê·ªôc l·∫≠p 1776', 'ƒê·∫°o lu·∫≠t Mint Act 1792', 'N·ªôi chi·∫øn M·ªπ 1861', 'ƒê·∫°i suy tho√°i 1929'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'L·ªãch s·ª≠ ti·ªÅn t·ªá'
    },
    {
      id: 'history_6',
      question: 'V√†ng tr·ªü th√†nh ti√™u chu·∫©n ti·ªÅn t·ªá to√†n c·∫ßu v√†o th·∫ø k·ª∑ n√†o?',
      options: ['18', '19', '20', '21'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'L·ªãch s·ª≠ ti·ªÅn t·ªá'
    },
    {
      id: 'history_7',
      question: 'H·ªá th·ªëng ti·ªÅn t·ªá ƒë·∫ßu ti√™n ·ªü ch√¢u M·ªπ l√† g√¨?',
      options: ['Ti·ªÅn gi·∫•y in b·ªüi Anh', 'Bills of credit t·ª´ Continental Congress', 'Ti·ªÅn xu v√†ng', 'Ti·ªÅn s·ªë'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'L·ªãch s·ª≠ ti·ªÅn t·ªá'
    },
    {
      id: 'history_8',
      question: 'Spade money l√† lo·∫°i ti·ªÅn t·ªá c·ªï c·ªßa tri·ªÅu ƒë·∫°i n√†o ·ªü Trung Qu·ªëc?',
      options: ['H√°n', 'Chu', 'T·∫ßn', 'Minh'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'L·ªãch s·ª≠ ti·ªÅn t·ªá'
    },
    {
      id: 'history_9',
      question: 'S·ª± ki·ªán "Gold Rush" ƒë·∫ßu ti√™n ·ªü M·ªπ x·∫£y ra nƒÉm n√†o?',
      options: ['1802', '1849', '1900', '1933'],
      answer: 0,
      reward: { chronoCoin: 5 },
      category: 'L·ªãch s·ª≠ ti·ªÅn t·ªá'
    },
    {
      id: 'history_10',
      question: 'Ti·ªÅn t·ªá ƒë·∫ßu ti√™n ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p trong Kinh Th√°nh l√† g√¨?',
      options: ['V√†ng', 'Ti·ªÅn b·∫°c (shekels)', 'V·ªè s√≤', 'Ti·ªÅn gi·∫•y'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'L·ªãch s·ª≠ ti·ªÅn t·ªá'
    },
    {
      id: 'history_11',
      question: 'Coinage ƒë·∫ßu ti√™n xu·∫•t hi·ªán ·ªü khu v·ª±c n√†o?',
      options: ['Ch√¢u Phi', 'Asia Minor', 'Ch√¢u M·ªπ', 'Ch√¢u √Çu'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'L·ªãch s·ª≠ ti·ªÅn t·ªá'
    },
    {
      id: 'history_12',
      question: 'Ti·ªÅn gi·∫•y hi·ªán ƒë·∫°i b·∫Øt ngu·ªìn t·ª´ cu·ªôc chi·∫øn ch·ªëng gi·∫£ m·∫°o ·ªü th·∫ø k·ª∑ n√†o?',
      options: ['7', '10', '15', '18'],
      answer: 0,
      reward: { chronoCoin: 5 },
      category: 'L·ªãch s·ª≠ ti·ªÅn t·ªá'
    },
    {
      id: 'history_13',
      question: 'Cattle (gia s√∫c) ƒë∆∞·ª£c s·ª≠ d·ª•ng l√†m ti·ªÅn t·ªá t·ª´ nƒÉm n√†o?',
      options: ['9000‚Äì6000 BC', '1000 BC', '500 AD', '1800 AD'],
      answer: 0,
      reward: { chronoCoin: 5 },
      category: 'L·ªãch s·ª≠ ti·ªÅn t·ªá'
    },
    {
      id: 'history_14',
      question: 'United States Mint ƒë∆∞·ª£c th√†nh l·∫≠p nƒÉm n√†o?',
      options: ['1776', '1792', '1833', '1900'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'L·ªãch s·ª≠ ti·ªÅn t·ªá'
    },
    {
      id: 'history_15',
      question: 'Ti·ªÅn t·ªá ti·∫øn h√≥a t·ª´ kim lo·∫°i sang gi·∫•y do nhu c·∫ßu g√¨?',
      options: ['D·ªÖ mang theo', 'Ch·ªëng gi·∫£ m·∫°o', 'TƒÉng gi√° tr·ªã', 'K·∫øt n·ªëi s·ªë'],
      answer: 0,
      reward: { chronoCoin: 5 },
      category: 'L·ªãch s·ª≠ ti·ªÅn t·ªá'
    },

    // Nh√≥m 2: Ti·ªÅn s·ªë h√≥a l√† g√¨ (10 c√¢u)
    {
      id: 'digital_1',
      question: 'Ti·ªÅn s·ªë (digital currency) t·ªìn t·∫°i d∆∞·ªõi d·∫°ng g√¨?',
      options: ['V·∫≠t l√Ω nh∆∞ ti·ªÅn gi·∫•y', 'Ho√†n to√†n ƒëi·ªán t·ª≠', 'Kim lo·∫°i qu√Ω', 'H√†ng h√≥a trao ƒë·ªïi'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'Ti·ªÅn s·ªë h√≥a'
    },
    {
      id: 'digital_2',
      question: 'CBDC l√† vi·∫øt t·∫Øt c·ªßa g√¨?',
      options: ['Central Bank Digital Currency', 'Crypto Blockchain Digital Coin', 'Commercial Bank Deposit Currency', 'Cash-Based Digital Currency'],
      answer: 0,
      reward: { matCoin: 5 },
      category: 'Ti·ªÅn s·ªë h√≥a'
    },
    {
      id: 'digital_3',
      question: 'Cryptocurrency kh√°c v·ªõi ti·ªÅn truy·ªÅn th·ªëng ·ªü ƒëi·ªÉm n√†o?',
      options: ['Kh√¥ng c·∫ßn ng√¢n h√†ng trung ∆∞∆°ng', 'Lu√¥n c√≥ d·∫°ng v·∫≠t l√Ω', 'Ch·ªâ d√πng ƒë·ªÉ trao ƒë·ªïi h√†ng h√≥a', 'ƒê∆∞·ª£c in b·ªüi ch√≠nh ph·ªß'],
      answer: 0,
      reward: { matCoin: 5 },
      category: 'Ti·ªÅn s·ªë h√≥a'
    },
    {
      id: 'digital_4',
      question: 'V√≠ ƒëi·ªán t·ª≠ (digital wallet) d√πng ƒë·ªÉ l√†m g√¨?',
      options: ['L∆∞u tr·ªØ ti·ªÅn gi·∫•y', 'Chuy·ªÉn kho·∫£n ƒëi·ªán t·ª≠', 'ƒê√∫c ti·ªÅn xu', 'Trao ƒë·ªïi v√†ng'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'Ti·ªÅn s·ªë h√≥a'
    },
    {
      id: 'digital_5',
      question: 'Ti·ªÅn s·ªë c√≥ th·ªÉ ƒë∆∞·ª£c quy ƒë·ªãnh b·ªüi ai?',
      options: ['Ch·ªâ c√° nh√¢n', 'Ng√¢n h√†ng trung ∆∞∆°ng ho·∫∑c kh√¥ng quy ƒë·ªãnh', 'Ch·ªâ doanh nghi·ªáp', 'Ch·ªâ ch√≠nh ph·ªß'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'Ti·ªÅn s·ªë h√≥a'
    },
    {
      id: 'digital_6',
      question: 'Blockchain d√πng ƒë·ªÉ l√†m g√¨ trong ti·ªÅn s·ªë?',
      options: ['X√°c th·ª±c giao d·ªãch', 'In ti·ªÅn gi·∫•y', 'Trao ƒë·ªïi h√†ng h√≥a', 'L∆∞u tr·ªØ v√†ng'],
      answer: 0,
      reward: { matCoin: 5 },
      category: 'Ti·ªÅn s·ªë h√≥a'
    },
    {
      id: 'digital_7',
      question: 'Ti·ªÅn ·∫£o (virtual currency) kh√¥ng c√≥ d·∫°ng g√¨?',
      options: ['ƒêi·ªán t·ª≠', 'V·∫≠t l√Ω', 'S·ªë h√≥a', 'M√£ h√≥a'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'Ti·ªÅn s·ªë h√≥a'
    },
    {
      id: 'digital_8',
      question: 'Digital money ƒë∆∞·ª£c chuy·ªÉn giao qua g√¨?',
      options: ['M√°y in', 'M√°y t√≠nh v√† m·∫°ng', 'Th∆∞ tay', 'Xe t·∫£i'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'Ti·ªÅn s·ªë h√≥a'
    },
    {
      id: 'digital_9',
      question: 'Stablecoins l√† lo·∫°i ti·ªÅn s·ªë g√¨?',
      options: ['Bi·∫øn ƒë·ªông cao', 'Li√™n k·∫øt v·ªõi t√†i s·∫£n ·ªïn ƒë·ªãnh', 'Ch·ªâ d√πng cho game', 'Kh√¥ng m√£ h√≥a'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'Ti·ªÅn s·ªë h√≥a'
    },
    {
      id: 'digital_10',
      question: 'Ti·ªÅn s·ªë gi√∫p gi·∫£m r·ªßi ro g√¨?',
      options: ['Gi·∫£ m·∫°o', 'M·∫•t m√°t v·∫≠t l√Ω', 'T·∫•t c·∫£ c√°c l·ª±a ch·ªçn', 'Kh√¥ng c√≥ r·ªßi ro'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'Ti·ªÅn s·ªë h√≥a'
    },

    // Nh√≥m 3: C√¢u chuy·ªán v·ªÅ Bitcoin (10 c√¢u)
    {
      id: 'bitcoin_1',
      question: 'Bitcoin ƒë∆∞·ª£c t·∫°o ra b·ªüi ai?',
      options: ['Elon Musk', 'Satoshi Nakamoto', 'Bill Gates', 'Warren Buffett'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'Bitcoin'
    },
    {
      id: 'bitcoin_2',
      question: 'Bitcoin ra ƒë·ªùi nƒÉm n√†o?',
      options: ['2008', '2009', '2010', '2011'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'Bitcoin'
    },
    {
      id: 'bitcoin_3',
      question: 'Gi√° Bitcoin l·∫ßn ƒë·∫ßu ƒë·∫°t 1 USD v√†o nƒÉm n√†o?',
      options: ['2009', '2010', '2011', '2013'],
      answer: 2,
      reward: { chronoCoin: 5 },
      category: 'Bitcoin'
    },
    {
      id: 'bitcoin_4',
      question: 'S·ª± ki·ªán ƒë·∫ßu ti√™n mua h√†ng b·∫±ng Bitcoin l√† g√¨?',
      options: ['Mua xe', 'Mua pizza', 'Mua nh√†', 'Mua v√†ng'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'Bitcoin'
    },
    {
      id: 'bitcoin_5',
      question: 'Bitcoin ƒë·∫°t ƒë·ªânh gi√° ƒë·∫ßu ti√™n v√†o nƒÉm n√†o?',
      options: ['2013', '2017', '2021', '2025'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'Bitcoin'
    },
    {
      id: 'bitcoin_6',
      question: 'Blockchain c·ªßa Bitcoin b·∫Øt ƒë·∫ßu t·ª´ block n√†o?',
      options: ['Block 0 (Genesis)', 'Block 1', 'Block 100', 'Block 1000'],
      answer: 0,
      reward: { chronoCoin: 5 },
      category: 'Bitcoin'
    },
    {
      id: 'bitcoin_7',
      question: 'Bitcoin b·ªã ·∫£nh h∆∞·ªüng l·ªõn b·ªüi s·ª± ki·ªán n√†o nƒÉm 2020?',
      options: ['ƒê·∫°i d·ªãch COVID-19', 'Chi·∫øn tranh', 'B·∫ßu c·ª≠ M·ªπ', 'Olympics'],
      answer: 0,
      reward: { chronoCoin: 5 },
      category: 'Bitcoin'
    },
    {
      id: 'bitcoin_8',
      question: 'L·ªãch s·ª≠ Bitcoin b·∫Øt ngu·ªìn t·ª´ lƒ©nh v·ª±c n√†o?',
      options: ['Cryptography', 'Ng√¢n h√†ng', 'N√¥ng nghi·ªáp', 'Du l·ªãch'],
      answer: 0,
      reward: { chronoCoin: 5 },
      category: 'Bitcoin'
    },
    {
      id: 'bitcoin_9',
      question: 'Bitcoin l·∫ßn ƒë·∫ßu ƒë·∫°t 10 USD v√†o th√°ng n√†o nƒÉm 2011?',
      options: ['Th√°ng 1', 'Th√°ng 6', 'Th√°ng 12', 'Kh√¥ng ƒë·∫°t'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'Bitcoin'
    },
    {
      id: 'bitcoin_10',
      question: 'Bitcoin k·∫øt th√∫c nƒÉm 2019 v·ªõi gi√° kho·∫£ng bao nhi√™u?',
      options: ['1000 USD', '7200 USD', '10000 USD', '50000 USD'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'Bitcoin'
    },

    // Nh√≥m 4: Ti·ªÅn trong t∆∞∆°ng lai (15 c√¢u)
    {
      id: 'future_1',
      question: 'CBDC c√≥ th·ªÉ thay ƒë·ªïi g√¨ trong ng√¢n h√†ng?',
      options: ['K·∫øt th√∫c ng√¢n h√†ng truy·ªÅn th·ªëng', 'TƒÉng t·ªëc giao d·ªãch', 'T·∫•t c·∫£ c√°c l·ª±a ch·ªçn', 'Kh√¥ng thay ƒë·ªïi'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'T∆∞∆°ng lai ti·ªÅn t·ªá'
    },
    {
      id: 'future_2',
      question: 'S·ªë l∆∞·ª£ng qu·ªëc gia ƒëang kh√°m ph√° CBDC l√† bao nhi√™u?',
      options: ['50', '114', '200', '300'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'T∆∞∆°ng lai ti·ªÅn t·ªá'
    },
    {
      id: 'future_3',
      question: 'CBDC c√≥ th·ªÉ d√πng ƒë·ªÉ t·∫°o ti·ªÅn g√¨?',
      options: ['Programmable money', 'Ti·ªÅn gi·∫•y m·ªõi', 'V√†ng k·ªπ thu·∫≠t s·ªë', 'H√†ng h√≥a'],
      answer: 0,
      reward: { matCoin: 5 },
      category: 'T∆∞∆°ng lai ti·ªÅn t·ªá'
    },
    {
      id: 'future_4',
      question: 'Xu h∆∞·ªõng CBDC tƒÉng m·∫°nh ·ªü khu v·ª±c n√†o?',
      options: ['Ch√¢u √Çu', 'Th·ªã tr∆∞·ªùng m·ªõi n·ªïi', 'Ch√¢u Phi', 'M·ªπ'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'T∆∞∆°ng lai ti·ªÅn t·ªá'
    },
    {
      id: 'future_5',
      question: 'S·ªë l∆∞·ª£ng giao d·ªãch CBDC d·ª± ƒëo√°n nƒÉm 2031 l√† bao nhi√™u?',
      options: ['1 t·ª∑', '7.8 t·ª∑', '100 t·ª∑', '1 ngh√¨n t·ª∑'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'T∆∞∆°ng lai ti·ªÅn t·ªá'
    },
    {
      id: 'future_6',
      question: 'Blockchain gi√∫p CBDC gi·∫£m r·ªßi ro g√¨?',
      options: ['Th·∫•t b·∫°i c·ªßa t·ªï ch·ª©c t√†i ch√≠nh', 'L·∫°m ph√°t', 'Chi·∫øn tranh', 'Th·ªùi ti·∫øt'],
      answer: 0,
      reward: { matCoin: 5 },
      category: 'T∆∞∆°ng lai ti·ªÅn t·ªá'
    },
    {
      id: 'future_7',
      question: 'Digital currencies c√≥ th·ªÉ m·ªü ra k·ª∑ nguy√™n g√¨?',
      options: ['Thanh to√°n to√†n c·∫ßu m·ªõi', 'Trao ƒë·ªïi h√†ng h√≥a c≈©', 'Ti·ªÅn gi·∫•y', 'V√†ng'],
      answer: 0,
      reward: { matCoin: 5 },
      category: 'T∆∞∆°ng lai ti·ªÅn t·ªá'
    },
    {
      id: 'future_8',
      question: 'Nghi√™n c·ª©u v·ªÅ ti·ªÅn t∆∞∆°ng lai t·∫≠p trung v√†o g√¨?',
      options: ['Digitalisation', 'In ti·ªÅn gi·∫•y', 'Trao ƒë·ªïi v·∫≠t l√Ω', 'Kh√¥ng thay ƒë·ªïi'],
      answer: 0,
      reward: { matCoin: 5 },
      category: 'T∆∞∆°ng lai ti·ªÅn t·ªá'
    },
    {
      id: 'future_9',
      question: 'Stablecoins ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p trong b√°o c√°o n√†o?',
      options: ['Future of Money and Payments', 'Wikipedia', 'Kinh Th√°nh', 'Kh√¥ng c√≥'],
      answer: 0,
      reward: { matCoin: 5 },
      category: 'T∆∞∆°ng lai ti·ªÅn t·ªá'
    },
    {
      id: 'future_10',
      question: 'CBDC gi√∫p tƒÉng g√¨ cho th·ªã tr∆∞·ªùng m·ªõi n·ªïi?',
      options: ['Financial inclusion', 'L·∫°m ph√°t', 'N·ª£ n·∫ßn', 'Chi·∫øn tranh'],
      answer: 0,
      reward: { matCoin: 5 },
      category: 'T∆∞∆°ng lai ti·ªÅn t·ªá'
    },
    {
      id: 'future_11',
      question: 'T∆∞∆°ng lai ti·ªÅn t·ªá bao g·ªìm g√¨?',
      options: ['Instant payments', 'Ch·ªâ ti·ªÅn gi·∫•y', 'Trao ƒë·ªïi h√†ng h√≥a', 'Kh√¥ng s·ªë h√≥a'],
      answer: 0,
      reward: { matCoin: 5 },
      category: 'T∆∞∆°ng lai ti·ªÅn t·ªá'
    },
    {
      id: 'future_12',
      question: 'CBDC c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng nh∆∞ g√¨?',
      options: ['D·∫°ng s·ªë c·ªßa ti·ªÅn m·∫∑t', 'V√†ng', 'H√†ng h√≥a', 'Xe h∆°i'],
      answer: 0,
      reward: { matCoin: 5 },
      category: 'T∆∞∆°ng lai ti·ªÅn t·ªá'
    },
    {
      id: 'future_13',
      question: 'Xu h∆∞·ªõng to√†n c·∫ßu c·ªßa CBDC l√† g√¨?',
      options: ['Gi·∫£m s·ª≠ d·ª•ng ti·ªÅn m·∫∑t', 'TƒÉng ti·ªÅn gi·∫•y', 'Kh√¥ng thay ƒë·ªïi', 'Ch·ªâ ·ªü M·ªπ'],
      answer: 0,
      reward: { matCoin: 5 },
      category: 'T∆∞∆°ng lai ti·ªÅn t·ªá'
    },
    {
      id: 'future_14',
      question: 'Blockchain trong CBDC gi√∫p g√¨?',
      options: ['T·∫°o ti·ªÅn l·∫≠p tr√¨nh', 'In ti·ªÅn', 'Trao ƒë·ªïi v·∫≠t l√Ω', 'Kh√¥ng gi√∫p'],
      answer: 0,
      reward: { matCoin: 5 },
      category: 'T∆∞∆°ng lai ti·ªÅn t·ªá'
    },
    {
      id: 'future_15',
      question: 'T∆∞∆°ng lai thanh to√°n t·∫≠p trung v√†o g√¨?',
      options: ['Digital wallets v√† CBDC', 'Ch·ªâ v√†ng', 'Ti·ªÅn gi·∫•y', 'H√†ng h√≥a'],
      answer: 0,
      reward: { matCoin: 5 },
      category: 'T∆∞∆°ng lai ti·ªÅn t·ªá'
    },

    // Nh√≥m 5: Cung v√† C·∫ßu (10 c√¢u)
    {
      id: 'supply_demand_1',
      question: 'Trong kinh t·∫ø th·ªã tr∆∞·ªùng, gi√° c·∫£ ƒë∆∞·ª£c x√°c ƒë·ªãnh ch·ªß y·∫øu b·ªüi y·∫øu t·ªë n√†o?',
      options: ['Ch√≠nh ph·ªß', 'Cung v√† c·∫ßu', 'Ng√¢n h√†ng', 'C√¥ng ngh·ªá'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'Cung v√† C·∫ßu'
    },
    {
      id: 'supply_demand_2',
      question: 'Khi c·∫ßu tƒÉng m√† cung kh√¥ng ƒë·ªïi, ƒëi·ªÅu g√¨ x·∫£y ra v·ªõi gi√°?',
      options: ['Gi·∫£m', 'TƒÉng', 'Kh√¥ng ƒë·ªïi', 'Bi·∫øn m·∫•t'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'Cung v√† C·∫ßu'
    },
    {
      id: 'supply_demand_3',
      question: 'N·∫øu cung v∆∞·ª£t c·∫ßu, ƒëi·ªÅu g√¨ th∆∞·ªùng x·∫£y ra?',
      options: ['Gi√° tƒÉng', 'Gi√° gi·∫£m', 'S·∫£n xu·∫•t ng·ª´ng', 'L·∫°m ph√°t'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'Cung v√† C·∫ßu'
    },
    {
      id: 'supply_demand_4',
      question: 'Y·∫øu t·ªë n√†o sau ƒë√¢y l√†m tƒÉng c·∫ßu trong kinh t·∫ø th·ªã tr∆∞·ªùng?',
      options: ['Thu nh·∫≠p ng∆∞·ªùi ti√™u d√πng gi·∫£m', 'Gi√° s·∫£n ph·∫©m tƒÉng', 'Qu·∫£ng c√°o hi·ªáu qu·∫£', 'Cung gi·∫£m m·∫°nh'],
      answer: 2,
      reward: { chronoCoin: 5 },
      category: 'Cung v√† C·∫ßu'
    },
    {
      id: 'supply_demand_5',
      question: '"ƒê·ªô co gi√£n c·ªßa c·∫ßu" ƒëo l∆∞·ªùng ƒëi·ªÅu g√¨?',
      options: ['S·∫£n l∆∞·ª£ng s·∫£n xu·∫•t', 'Ph·∫£n ·ª©ng c·ªßa c·∫ßu khi gi√° thay ƒë·ªïi', 'Chi ph√≠ v·∫≠n chuy·ªÉn', 'L·ª£i nhu·∫≠n doanh nghi·ªáp'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'Cung v√† C·∫ßu'
    },
    {
      id: 'supply_demand_6',
      question: 'Khi gi√° d·∫ßu tƒÉng, c·∫ßu cho xe ƒëi·ªán th∆∞·ªùng:',
      options: ['Gi·∫£m', 'TƒÉng', 'Kh√¥ng ƒë·ªïi', 'Bi·∫øn m·∫•t'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'Cung v√† C·∫ßu'
    },
    {
      id: 'supply_demand_7',
      question: 'Cung tƒÉng khi n√†o?',
      options: ['Chi ph√≠ s·∫£n xu·∫•t gi·∫£m', 'Gi√° s·∫£n ph·∫©m gi·∫£m', 'Thu·∫ø tƒÉng cao', 'C·∫ßu gi·∫£m'],
      answer: 0,
      reward: { chronoCoin: 5 },
      category: 'Cung v√† C·∫ßu'
    },
    {
      id: 'supply_demand_8',
      question: 'Trong kinh t·∫ø th·ªã tr∆∞·ªùng, "th·∫∑ng d∆∞ ti√™u d√πng" l√† g√¨?',
      options: ['L·ª£i nhu·∫≠n c·ªßa nh√† s·∫£n xu·∫•t', 'L·ª£i √≠ch ng∆∞·ªùi mua nh·∫≠n khi tr·∫£ √≠t h∆°n gi√° tr·ªã mong mu·ªën', 'Thu·∫ø ch√≠nh ph·ªß thu', 'Chi ph√≠ v·∫≠n chuy·ªÉn'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'Cung v√† C·∫ßu'
    },
    {
      id: 'supply_demand_9',
      question: 'Khi ch√≠nh ph·ªß √°p gi√° tr·∫ßn d∆∞·ªõi gi√° th·ªã tr∆∞·ªùng, ƒëi·ªÅu g√¨ x·∫£y ra?',
      options: ['Th·∫∑ng d∆∞ h√†ng h√≥a', 'Thi·∫øu h·ª•t h√†ng h√≥a', 'Gi√° tƒÉng v·ªçt', 'C·∫ßu gi·∫£m'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'Cung v√† C·∫ßu'
    },
    {
      id: 'supply_demand_10',
      question: 'Y·∫øu t·ªë n√†o kh√¥ng ·∫£nh h∆∞·ªüng tr·ª±c ti·∫øp ƒë·∫øn cung trong ng·∫Øn h·∫°n?',
      options: ['C√¥ng ngh·ªá s·∫£n xu·∫•t', 'Gi√° nguy√™n li·ªáu', 'S·ªü th√≠ch ti√™u d√πng', 'Thu·∫ø s·∫£n xu·∫•t'],
      answer: 2,
      reward: { chronoCoin: 5 },
      category: 'Cung v√† C·∫ßu'
    },

    // Nh√≥m 6: C·∫°nh Tranh v√† Th·ªã Tr∆∞·ªùng (10 c√¢u)
    {
      id: 'competition_1',
      question: 'Kinh t·∫ø th·ªã tr∆∞·ªùng khuy·∫øn kh√≠ch ƒëi·ªÅu g√¨ gi·ªØa c√°c doanh nghi·ªáp?',
      options: ['ƒê·ªôc quy·ªÅn', 'C·∫°nh tranh', 'H·ª£p t√°c duy nh·∫•t', 'Gi·∫£m s·∫£n xu·∫•t'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'C·∫°nh Tranh v√† Th·ªã Tr∆∞·ªùng'
    },
    {
      id: 'competition_2',
      question: 'Th·ªã tr∆∞·ªùng c·∫°nh tranh ho√†n h·∫£o c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨?',
      options: ['M·ªôt nh√† cung c·∫•p duy nh·∫•t', 'Nhi·ªÅu nh√† cung c·∫•p v·ªõi s·∫£n ph·∫©m gi·ªëng nhau', 'Gi√° c·ªë ƒë·ªãnh b·ªüi ch√≠nh ph·ªß', 'Kh√¥ng c√≥ ng∆∞·ªùi mua'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'C·∫°nh Tranh v√† Th·ªã Tr∆∞·ªùng'
    },
    {
      id: 'competition_3',
      question: 'ƒê·ªôc quy·ªÅn (monopoly) x·∫£y ra khi:',
      options: ['Nhi·ªÅu c√¥ng ty c·∫°nh tranh', 'M·ªôt c√¥ng ty ki·ªÉm so√°t to√†n b·ªô th·ªã tr∆∞·ªùng', 'Gi√° c·∫£ do ng∆∞·ªùi ti√™u d√πng quy·∫øt ƒë·ªãnh', 'Cung b·∫±ng c·∫ßu'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'C·∫°nh Tranh v√† Th·ªã Tr∆∞·ªùng'
    },
    {
      id: 'competition_4',
      question: 'Trong kinh t·∫ø th·ªã tr∆∞·ªùng, "l·ª£i th·∫ø c·∫°nh tranh" d·ª±a tr√™n g√¨?',
      options: ['Gi√° cao nh·∫•t', 'S·∫£n ph·∫©m/d·ªãch v·ª• t·ªët h∆°n ho·∫∑c r·∫ª h∆°n', 'Thu·∫ø th·∫•p', 'Quy ƒë·ªãnh ch√≠nh ph·ªß'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'C·∫°nh Tranh v√† Th·ªã Tr∆∞·ªùng'
    },
    {
      id: 'competition_5',
      question: 'Th·ªã tr∆∞·ªùng oligopoly c√≥ ƒë·∫∑c ƒëi·ªÉm g√¨?',
      options: ['M·ªôt nh√† cung c·∫•p', 'V√†i nh√† cung c·∫•p l·ªõn', 'Nhi·ªÅu nh√† cung c·∫•p nh·ªè', 'Kh√¥ng c√≥ c·∫°nh tranh'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'C·∫°nh Tranh v√† Th·ªã Tr∆∞·ªùng'
    },
    {
      id: 'competition_6',
      question: 'C·∫°nh tranh trong kinh t·∫ø th·ªã tr∆∞·ªùng d·∫´n ƒë·∫øn g√¨?',
      options: ['Gi√° cao h∆°n', 'ƒê·ªïi m·ªõi v√† hi·ªáu qu·∫£', 'Gi·∫£m ch·∫•t l∆∞·ª£ng', 'TƒÉng ƒë·ªôc quy·ªÅn'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'C·∫°nh Tranh v√† Th·ªã Tr∆∞·ªùng'
    },
    {
      id: 'competition_7',
      question: 'Th·ªã tr∆∞·ªùng ch·ª©ng kho√°n l√† n∆°i g√¨?',
      options: ['Mua b√°n h√†ng h√≥a v·∫≠t l√Ω', 'Mua b√°n c·ªï phi·∫øu v√† tr√°i phi·∫øu', 'Trao ƒë·ªïi ti·ªÅn ·∫£o', 'B√°n v√†ng'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'C·∫°nh Tranh v√† Th·ªã Tr∆∞·ªùng'
    },
    {
      id: 'competition_8',
      question: '"Th·∫•t b·∫°i th·ªã tr∆∞·ªùng" x·∫£y ra khi:',
      options: ['Gi√° b·∫±ng cung c·∫ßu', 'Th·ªã tr∆∞·ªùng kh√¥ng ph√¢n b·ªï t√†i nguy√™n hi·ªáu qu·∫£', 'C·∫°nh tranh tƒÉng cao', 'L·ª£i nhu·∫≠n ƒë·∫°t t·ªëi ƒëa'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'C·∫°nh Tranh v√† Th·ªã Tr∆∞·ªùng'
    },
    {
      id: 'competition_9',
      question: 'Trong kinh t·∫ø th·ªã tr∆∞·ªùng, ai quy·∫øt ƒë·ªãnh s·∫£n xu·∫•t g√¨?',
      options: ['Ch√≠nh ph·ªß', 'Doanh nghi·ªáp d·ª±a tr√™n nhu c·∫ßu ng∆∞·ªùi ti√™u d√πng', 'Ng√¢n h√†ng trung ∆∞∆°ng', 'Nh√† ƒë·∫ßu t∆∞ n∆∞·ªõc ngo√†i'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'C·∫°nh Tranh v√† Th·ªã Tr∆∞·ªùng'
    },
    {
      id: 'competition_10',
      question: 'Y·∫øu t·ªë n√†o l√†m gi·∫£m c·∫°nh tranh trong th·ªã tr∆∞·ªùng?',
      options: ['Nhi·ªÅu c√¥ng ty tham gia', 'R√†o c·∫£n gia nh·∫≠p cao', 'Gi√° th·∫•p', 'S·∫£n ph·∫©m ƒëa d·∫°ng'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'C·∫°nh Tranh v√† Th·ªã Tr∆∞·ªùng'
    },

    // Nh√≥m 7: L·∫°m Ph√°t v√† Suy Tho√°i (10 c√¢u)
    {
      id: 'inflation_1',
      question: 'L·∫°m ph√°t l√† g√¨ trong kinh t·∫ø th·ªã tr∆∞·ªùng?',
      options: ['Gi√° c·∫£ gi·∫£m li√™n t·ª•c', 'Gi√° c·∫£ tƒÉng li√™n t·ª•c', 'S·∫£n xu·∫•t tƒÉng', 'C·∫ßu gi·∫£m'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'L·∫°m Ph√°t v√† Suy Tho√°i'
    },
    {
      id: 'inflation_2',
      question: 'L·∫°m ph√°t cao ·∫£nh h∆∞·ªüng th·∫ø n√†o ƒë·∫øn ti·ªÅn t·ªá?',
      options: ['TƒÉng gi√° tr·ªã ti·ªÅn', 'Gi·∫£m s·ª©c mua c·ªßa ti·ªÅn', 'Kh√¥ng ·∫£nh h∆∞·ªüng', 'Gi·∫£m cung ti·ªÅn'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'L·∫°m Ph√°t v√† Suy Tho√°i'
    },
    {
      id: 'inflation_3',
      question: 'Suy tho√°i kinh t·∫ø ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a b·ªüi:',
      options: ['TƒÉng tr∆∞·ªüng GDP li√™n t·ª•c', 'Gi·∫£m GDP trong 2 qu√Ω li√™n ti·∫øp', 'Gi√° c·∫£ tƒÉng v·ªçt', 'C·∫°nh tranh gi·∫£m'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'L·∫°m Ph√°t v√† Suy Tho√°i'
    },
    {
      id: 'inflation_4',
      question: 'Ng√¢n h√†ng trung ∆∞∆°ng gi·∫£m l√£i su·∫•t ƒë·ªÉ l√†m g√¨?',
      options: ['TƒÉng l·∫°m ph√°t', 'K√≠ch th√≠ch kinh t·∫ø', 'Gi·∫£m cung ti·ªÅn', 'TƒÉng gi√° h√†ng h√≥a'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'L·∫°m Ph√°t v√† Suy Tho√°i'
    },
    {
      id: 'inflation_5',
      question: '"Hyperinflation" x·∫£y ra khi l·∫°m ph√°t ƒë·∫°t m·ª©c:',
      options: ['1-2% m·ªói nƒÉm', 'Tr√™n 50% m·ªói th√°ng', '10% m·ªói qu√Ω', 'Kh√¥ng thay ƒë·ªïi'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'L·∫°m Ph√°t v√† Suy Tho√°i'
    },
    {
      id: 'inflation_6',
      question: 'Trong suy tho√°i, ƒëi·ªÅu g√¨ th∆∞·ªùng tƒÉng?',
      options: ['Vi·ªác l√†m', 'Th·∫•t nghi·ªáp', 'L·∫°m ph√°t', 'ƒê·∫ßu t∆∞'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'L·∫°m Ph√°t v√† Suy Tho√°i'
    },
    {
      id: 'inflation_7',
      question: 'L·∫°m ph√°t do c·∫ßu k√©o (demand-pull) x·∫£y ra khi:',
      options: ['Chi ph√≠ s·∫£n xu·∫•t tƒÉng', 'Ng∆∞·ªùi ti√™u d√πng chi ti√™u nhi·ªÅu h∆°n cung', 'Ch√≠nh ph·ªß tƒÉng thu·∫ø', 'Cung ti·ªÅn gi·∫£m'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'L·∫°m Ph√°t v√† Suy Tho√°i'
    },
    {
      id: 'inflation_8',
      question: 'Ch√≠nh s√°ch n√†o gi√∫p ki·ªÉm so√°t l·∫°m ph√°t?',
      options: ['Gi·∫£m l√£i su·∫•t', 'TƒÉng l√£i su·∫•t', 'Gi·∫£m thu·∫ø', 'TƒÉng chi ti√™u ch√≠nh ph·ªß'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'L·∫°m Ph√°t v√† Suy Tho√°i'
    },
    {
      id: 'inflation_9',
      question: 'Suy tho√°i kinh t·∫ø th∆∞·ªùng d·∫´n ƒë·∫øn:',
      options: ['TƒÉng gi√° h√†ng h√≥a', 'Gi·∫£m ƒë·∫ßu t∆∞ doanh nghi·ªáp', 'TƒÉng cung ti·ªÅn', 'Gi·∫£m th·∫•t nghi·ªáp'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'L·∫°m Ph√°t v√† Suy Tho√°i'
    },
    {
      id: 'inflation_10',
      question: '"Stagflation" l√† g√¨?',
      options: ['L·∫°m ph√°t cao v√† tƒÉng tr∆∞·ªüng kinh t·∫ø', 'L·∫°m ph√°t cao v√† suy tho√°i', 'Gi√° gi·∫£m v√† tƒÉng tr∆∞·ªüng', 'Kh√¥ng c√≥ l·∫°m ph√°t'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'L·∫°m Ph√°t v√† Suy Tho√°i'
    },

    // Nh√≥m 8: ƒê·∫ßu T∆∞ v√† T√†i Ch√≠nh Th·ªã Tr∆∞·ªùng (10 c√¢u)
    {
      id: 'investment_1',
      question: 'Trong kinh t·∫ø th·ªã tr∆∞·ªùng, "ƒë·∫ßu t∆∞" th∆∞·ªùng nh·∫±m m·ª•c ƒë√≠ch g√¨?',
      options: ['Gi·∫£m gi√° h√†ng h√≥a', 'T·∫°o l·ª£i nhu·∫≠n trong t∆∞∆°ng lai', 'TƒÉng thu·∫ø', 'Gi·∫£m c·∫ßu'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'ƒê·∫ßu T∆∞ v√† T√†i Ch√≠nh Th·ªã Tr∆∞·ªùng'
    },
    {
      id: 'investment_2',
      question: 'Th·ªã tr∆∞·ªùng t√†i ch√≠nh gi√∫p g√¨ cho kinh t·∫ø?',
      options: ['Ph√¢n b·ªï v·ªën hi·ªáu qu·∫£', 'TƒÉng l·∫°m ph√°t', 'Gi·∫£m s·∫£n xu·∫•t', 'NgƒÉn ch·∫∑n c·∫°nh tranh'],
      answer: 0,
      reward: { matCoin: 5 },
      category: 'ƒê·∫ßu T∆∞ v√† T√†i Ch√≠nh Th·ªã Tr∆∞·ªùng'
    },
    {
      id: 'investment_3',
      question: 'C·ªï phi·∫øu ƒë·∫°i di·ªán cho g√¨ trong m·ªôt c√¥ng ty?',
      options: ['N·ª£ c·ªßa c√¥ng ty', 'Quy·ªÅn s·ªü h·ªØu m·ªôt ph·∫ßn c√¥ng ty', 'L·ª£i nhu·∫≠n c·ªë ƒë·ªãnh', 'H√†ng h√≥a s·∫£n xu·∫•t'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'ƒê·∫ßu T∆∞ v√† T√†i Ch√≠nh Th·ªã Tr∆∞·ªùng'
    },
    {
      id: 'investment_4',
      question: 'Tr√°i phi·∫øu l√† g√¨?',
      options: ['Quy·ªÅn s·ªü h·ªØu c√¥ng ty', 'Kho·∫£n vay cho c√¥ng ty ho·∫∑c ch√≠nh ph·ªß', 'Ti·ªÅn t·ªá s·ªë', 'H√†ng h√≥a v·∫≠t l√Ω'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'ƒê·∫ßu T∆∞ v√† T√†i Ch√≠nh Th·ªã Tr∆∞·ªùng'
    },
    {
      id: 'investment_5',
      question: '"R·ªßi ro ƒë·∫ßu t∆∞" li√™n quan ƒë·∫øn ƒëi·ªÅu g√¨?',
      options: ['L·ª£i nhu·∫≠n c·ªë ƒë·ªãnh', 'Kh·∫£ nƒÉng m·∫•t ti·ªÅn ho·∫∑c kh√¥ng ƒë·∫°t l·ª£i nhu·∫≠n k·ª≥ v·ªçng', 'Gi√° h√†ng h√≥a tƒÉng', 'Cung tƒÉng'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'ƒê·∫ßu T∆∞ v√† T√†i Ch√≠nh Th·ªã Tr∆∞·ªùng'
    },
    {
      id: 'investment_6',
      question: 'Trong kinh t·∫ø th·ªã tr∆∞·ªùng, "bong b√≥ng t√†i ch√≠nh" l√† g√¨?',
      options: ['Gi√° t√†i s·∫£n tƒÉng qu√° cao so v·ªõi gi√° tr·ªã th·ª±c', 'Gi√° t√†i s·∫£n gi·∫£m ƒë·ªôt ng·ªôt', 'TƒÉng cung ti·ªÅn', 'Gi·∫£m l·∫°m ph√°t'],
      answer: 0,
      reward: { matCoin: 5 },
      category: 'ƒê·∫ßu T∆∞ v√† T√†i Ch√≠nh Th·ªã Tr∆∞·ªùng'
    },
    {
      id: 'investment_7',
      question: 'Qu·ªπ ƒë·∫ßu t∆∞ m·∫°o hi·ªÉm (venture capital) th∆∞·ªùng ƒë·∫ßu t∆∞ v√†o:',
      options: ['C√¥ng ty l·ªõn ·ªïn ƒë·ªãnh', 'Startup c√¥ng ngh·ªá m·ªõi', 'Ng√¢n h√†ng trung ∆∞∆°ng', 'H√†ng h√≥a v·∫≠t l√Ω'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'ƒê·∫ßu T∆∞ v√† T√†i Ch√≠nh Th·ªã Tr∆∞·ªùng'
    },
    {
      id: 'investment_8',
      question: '"L·ª£i nhu·∫≠n k√©p" (compound interest) ho·∫°t ƒë·ªông th·∫ø n√†o?',
      options: ['Ch·ªâ t√≠nh tr√™n v·ªën ban ƒë·∫ßu', 'T√≠nh l√£i tr√™n c·∫£ v·ªën v√† l√£i t√≠ch l≈©y', 'Kh√¥ng t·∫°o l·ª£i nhu·∫≠n', 'Gi·∫£m gi√° tr·ªã ƒë·∫ßu t∆∞'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'ƒê·∫ßu T∆∞ v√† T√†i Ch√≠nh Th·ªã Tr∆∞·ªùng'
    },
    {
      id: 'investment_9',
      question: 'Th·ªã tr∆∞·ªùng "bull market" l√† g√¨?',
      options: ['Gi√° t√†i s·∫£n gi·∫£m li√™n t·ª•c', 'Gi√° t√†i s·∫£n tƒÉng li√™n t·ª•c', 'Kh√¥ng c√≥ giao d·ªãch', 'L·∫°m ph√°t tƒÉng'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'ƒê·∫ßu T∆∞ v√† T√†i Ch√≠nh Th·ªã Tr∆∞·ªùng'
    },
    {
      id: 'investment_10',
      question: '"Diversification" trong ƒë·∫ßu t∆∞ l√† g√¨?',
      options: ['ƒê·∫ßu t∆∞ v√†o m·ªôt t√†i s·∫£n duy nh·∫•t', 'Ph√¢n b·ªï ƒë·∫ßu t∆∞ v√†o nhi·ªÅu t√†i s·∫£n ƒë·ªÉ gi·∫£m r·ªßi ro', 'TƒÉng l√£i su·∫•t', 'Gi·∫£m cung ti·ªÅn'],
      answer: 1,
      reward: { matCoin: 5 },
      category: 'ƒê·∫ßu T∆∞ v√† T√†i Ch√≠nh Th·ªã Tr∆∞·ªùng'
    },

    // Nh√≥m 9: Ch√≠nh S√°ch v√† To√†n C·∫ßu H√≥a (10 c√¢u)
    {
      id: 'policy_1',
      question: 'Trong kinh t·∫ø th·ªã tr∆∞·ªùng, ch√≠nh ph·ªß can thi·ªáp ƒë·ªÉ l√†m g√¨?',
      options: ['Lo·∫°i b·ªè c·∫°nh tranh', 'S·ª≠a th·∫•t b·∫°i th·ªã tr∆∞·ªùng (nh∆∞ √¥ nhi·ªÖm)', 'TƒÉng ƒë·ªôc quy·ªÅn', 'Gi·∫£m cung'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'Ch√≠nh S√°ch v√† To√†n C·∫ßu H√≥a'
    },
    {
      id: 'policy_2',
      question: 'To√†n c·∫ßu h√≥a trong kinh t·∫ø th·ªã tr∆∞·ªùng d·∫´n ƒë·∫øn g√¨?',
      options: ['Gi·∫£m th∆∞∆°ng m·∫°i qu·ªëc t·∫ø', 'TƒÉng giao th∆∞∆°ng gi·ªØa c√°c qu·ªëc gia', 'Gi·∫£m c·∫°nh tranh', 'TƒÉng ƒë·ªôc quy·ªÅn'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'Ch√≠nh S√°ch v√† To√†n C·∫ßu H√≥a'
    },
    {
      id: 'policy_3',
      question: 'Thu·∫ø nh·∫≠p kh·∫©u cao c√≥ th·ªÉ l√†m g√¨?',
      options: ['TƒÉng gi√° h√†ng h√≥a nh·∫≠p kh·∫©u', 'Gi·∫£m gi√° h√†ng h√≥a n·ªôi ƒë·ªãa', 'TƒÉng l·∫°m ph√°t', 'Gi·∫£m ƒë·∫ßu t∆∞'],
      answer: 0,
      reward: { chronoCoin: 5 },
      category: 'Ch√≠nh S√°ch v√† To√†n C·∫ßu H√≥a'
    },
    {
      id: 'policy_4',
      question: '"T·ª± do th∆∞∆°ng m·∫°i" trong kinh t·∫ø th·ªã tr∆∞·ªùng l√† g√¨?',
      options: ['Lo·∫°i b·ªè r√†o c·∫£n th∆∞∆°ng m·∫°i gi·ªØa c√°c qu·ªëc gia', 'TƒÉng thu·∫ø nh·∫≠p kh·∫©u', 'Gi·∫£m xu·∫•t kh·∫©u', 'TƒÉng ƒë·ªôc quy·ªÅn'],
      answer: 0,
      reward: { chronoCoin: 5 },
      category: 'Ch√≠nh S√°ch v√† To√†n C·∫ßu H√≥a'
    },
    {
      id: 'policy_5',
      question: 'Ng√¢n h√†ng trung ∆∞∆°ng ƒëi·ªÅu ch·ªânh cung ti·ªÅn ƒë·ªÉ:',
      options: ['TƒÉng s·∫£n xu·∫•t h√†ng h√≥a', '·ªîn ƒë·ªãnh kinh t·∫ø', 'Gi·∫£m c·∫°nh tranh', 'TƒÉng gi√° h√†ng h√≥a'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'Ch√≠nh S√°ch v√† To√†n C·∫ßu H√≥a'
    },
    {
      id: 'policy_6',
      question: 'Hi·ªáp ƒë·ªãnh th∆∞∆°ng m·∫°i t·ª± do (FTA) c√≥ l·ª£i √≠ch g√¨?',
      options: ['TƒÉng thu·∫ø nh·∫≠p kh·∫©u', 'Gi·∫£m chi ph√≠ th∆∞∆°ng m·∫°i gi·ªØa c√°c n∆∞·ªõc', 'Gi·∫£m xu·∫•t kh·∫©u', 'TƒÉng l·∫°m ph√°t'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'Ch√≠nh S√°ch v√† To√†n C·∫ßu H√≥a'
    },
    {
      id: 'policy_7',
      question: 'To√†n c·∫ßu h√≥a c√≥ th·ªÉ l√†m tƒÉng:',
      options: ['B·∫•t b√¨nh ƒë·∫≥ng thu nh·∫≠p', 'Gi·∫£m c·∫°nh tranh', 'TƒÉng ƒë·ªôc quy·ªÅn', 'Gi·∫£m ƒë·∫ßu t∆∞'],
      answer: 0,
      reward: { chronoCoin: 5 },
      category: 'Ch√≠nh S√°ch v√† To√†n C·∫ßu H√≥a'
    },
    {
      id: 'policy_8',
      question: '"Ch√≠nh s√°ch t√†i kh√≥a" li√™n quan ƒë·∫øn g√¨?',
      options: ['ƒêi·ªÅu ch·ªânh l√£i su·∫•t', 'Chi ti√™u v√† thu·∫ø c·ªßa ch√≠nh ph·ªß', 'TƒÉng cung ti·ªÅn', 'Gi·∫£m s·∫£n xu·∫•t'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'Ch√≠nh S√°ch v√† To√†n C·∫ßu H√≥a'
    },
    {
      id: 'policy_9',
      question: 'Kinh t·∫ø th·ªã tr∆∞·ªùng to√†n c·∫ßu ph·ª• thu·ªôc nhi·ªÅu v√†o:',
      options: ['C√¥ng ngh·ªá v√† th∆∞∆°ng m·∫°i', 'Ch·ªâ s·∫£n xu·∫•t n·ªôi ƒë·ªãa', 'Gi·∫£m giao th∆∞∆°ng', 'TƒÉng thu·∫ø'],
      answer: 0,
      reward: { chronoCoin: 5 },
      category: 'Ch√≠nh S√°ch v√† To√†n C·∫ßu H√≥a'
    },
    {
      id: 'policy_10',
      question: '"R·ªßi ro h·ªá th·ªëng" trong kinh t·∫ø th·ªã tr∆∞·ªùng l√† g√¨?',
      options: ['R·ªßi ro t·ª´ m·ªôt c√¥ng ty', 'R·ªßi ro ·∫£nh h∆∞·ªüng to√†n b·ªô th·ªã tr∆∞·ªùng t√†i ch√≠nh', 'Gi·∫£m gi√° h√†ng h√≥a', 'TƒÉng cung ti·ªÅn'],
      answer: 1,
      reward: { chronoCoin: 5 },
      category: 'Ch√≠nh S√°ch v√† To√†n C·∫ßu H√≥a'
    }
  ];

  // T·∫°o particle effect
  const createParticles = useCallback((x: number, y: number) => {
    const newParticles = Array.from({ length: 8 }, (_, i) => ({
      id: Date.now() + i,
      x: x + (Math.random() - 0.5) * 100,
      y: y + (Math.random() - 0.5) * 100
    }));
    setParticles(prev => [...prev, ...newParticles]);
    
    setTimeout(() => {
      setParticles(prev => prev.filter(p => !newParticles.some(np => np.id === p.id)));
    }, 1000);
  }, []);

  // Game timer v√† gi·∫£m d·∫ßn t·∫•t c·∫£ t√†i nguy√™n
  useEffect(() => {
    if (!gameState.gameActive || gameState.gameEnded) return;

    const timer = setInterval(() => {
      setGameState(prev => {
        const newTimeLeft = prev.timeLeft - 1;
        
        // Gi·∫£m t√†i nguy√™n theo th·ªùi gian
        const newLifespan = Math.max(0, prev.lifespan - 0.3); // Gi·∫£m 0.3%/gi√¢y
        const newQualityOfLife = Math.max(0, prev.qualityOfLife - 0.2); // Gi·∫£m 0.2%/gi√¢y
        const newEnergy = Math.max(0, prev.energy - 0.4); // Gi·∫£m 0.4%/gi√¢y (nhanh nh·∫•t)
        const newKnowledge = Math.max(0, prev.knowledge - 0.1); // Gi·∫£m 0.1%/gi√¢y (ch·∫≠m nh·∫•t)
        
        // Game over conditions
        if (newTimeLeft <= 0 || newLifespan <= 0 || newQualityOfLife <= 0 || newEnergy <= 0 || newKnowledge <= 0) {
          const isWin = newTimeLeft <= 0 && 
                       newLifespan >= 50 && 
                       newQualityOfLife >= 50 && 
                       newEnergy >= 50 && 
                       newKnowledge >= 50 && 
                       (prev.chronoCoin + prev.matCoin) >= 60;
          
          return {
            ...prev,
            timeLeft: 0,
            lifespan: Math.max(0, newLifespan),
            qualityOfLife: Math.max(0, newQualityOfLife),
            energy: Math.max(0, newEnergy),
            knowledge: Math.max(0, newKnowledge),
            gameActive: false,
            gameEnded: true,
            gameWon: isWin,
            score: prev.chronoCoin + prev.matCoin + Math.floor(prev.lifespan) + Math.floor(prev.qualityOfLife) + Math.floor(prev.energy) + Math.floor(prev.knowledge)
          };
        }

        return {
          ...prev,
          timeLeft: newTimeLeft,
          lifespan: newLifespan,
          qualityOfLife: newQualityOfLife,
          energy: newEnergy,
          knowledge: newKnowledge
        };
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [gameState.gameActive, gameState.gameEnded]);

  // Random events
  useEffect(() => {
    if (!gameState.gameActive || gameState.gameEnded || currentEvent) return;

    console.log('Setting up random event timer...'); // Debug log

    const eventTimer = setTimeout(() => {
      console.log('Random event timer triggered!'); // Debug log
      
      // 70% chance cho quiz, 30% cho c√°c s·ª± ki·ªán kh√°c
      const isQuiz = Math.random() < 0.7;
      
      if (isQuiz) {
        // Ch·ªçn random quiz question
        const randomQuiz = quizQuestions[Math.floor(Math.random() * quizQuestions.length)];
        const quizEvent: GameEvent = {
          id: randomQuiz.id,
          title: `üß† ${randomQuiz.category}`,
          description: 'Tr·∫£ l·ªùi ƒë√∫ng ƒë·ªÉ nh·∫≠n coin!',
          type: 'quiz',
          cost: {},
          effect: {},
          quizQuestion: randomQuiz.question,
          quizOptions: randomQuiz.options,
          quizAnswer: randomQuiz.answer
        };
        console.log('Setting quiz event:', quizEvent.title); // Debug log
        setCurrentEvent(quizEvent);
      } else {
        // Ch·ªçn random game event
        const randomEvent = gameEvents[Math.floor(Math.random() * gameEvents.length)];
        console.log('Setting game event:', randomEvent.title); // Debug log
        setCurrentEvent(randomEvent);
      }
      
      setShowQuiz(isQuiz);
    }, Math.random() * 5000 + 2000); // 2-7 gi√¢y (nhanh h∆°n)

    return () => {
      console.log('Clearing event timer'); // Debug log
      clearTimeout(eventTimer);
    };
  }, [gameState.gameActive, gameState.gameEnded, currentEvent]);

  // Trigger first event immediately when game starts
  useEffect(() => {
    if (gameState.gameActive && !gameState.gameEnded && !currentEvent) {
      console.log('Game started, triggering first event...'); // Debug log
      
      // Trigger first event after a short delay
      const firstEventTimer = setTimeout(() => {
        const isQuiz = Math.random() < 0.7;
        
        if (isQuiz) {
          const randomQuiz = quizQuestions[Math.floor(Math.random() * quizQuestions.length)];
          const quizEvent: GameEvent = {
            id: randomQuiz.id,
            title: `üß† ${randomQuiz.category}`,
            description: 'Tr·∫£ l·ªùi ƒë√∫ng ƒë·ªÉ nh·∫≠n coin!',
            type: 'quiz',
            cost: {},
            effect: {},
            quizQuestion: randomQuiz.question,
            quizOptions: randomQuiz.options,
            quizAnswer: randomQuiz.answer
          };
          console.log('First event - Quiz:', quizEvent.title);
          setCurrentEvent(quizEvent);
        } else {
          const randomEvent = gameEvents[Math.floor(Math.random() * gameEvents.length)];
          console.log('First event - Game event:', randomEvent.title);
          setCurrentEvent(randomEvent);
        }
        
        setShowQuiz(isQuiz);
      }, 1000); // 1 gi√¢y sau khi game b·∫Øt ƒë·∫ßu

      return () => clearTimeout(firstEventTimer);
    }
  }, [gameState.gameActive, gameState.gameEnded, currentEvent]);

  const startGame = () => {
    setGameState({
      chronoCoin: 30,
      matCoin: 30,
      lifespan: 100,
      qualityOfLife: 100,
      energy: 100,
      knowledge: 100,
      timeLeft: 300, // 5 ph√∫t
      gameActive: true,
      gameEnded: false,
      gameWon: false,
      score: 0,
      powerUpsUsed: {
        fiftyFifty: false,
        askAudience: false,
        phoneFriend: false,
        switchQuestion: false
      }
    });
    setCurrentEvent(null);
    setShowQuiz(false);
    setQuizAnswer(null);
    setEliminatedOptions([]);
  };

  const resetGame = () => {
    setGameState({
      chronoCoin: 30,
      matCoin: 30,
      lifespan: 100,
      qualityOfLife: 100,
      energy: 100,
      knowledge: 100,
      timeLeft: 300, // 5 ph√∫t
      gameActive: true, // T·ª± ƒë·ªông b·∫Øt ƒë·∫ßu game
      gameEnded: false,
      gameWon: false,
      score: 0,
      powerUpsUsed: {
        fiftyFifty: false,
        askAudience: false,
        phoneFriend: false,
        switchQuestion: false
      }
    });
    setCurrentEvent(null);
    setShowQuiz(false);
    setQuizAnswer(null);
    setEliminatedOptions([]);
  };

  const handleEventChoice = (accept: boolean) => {
    if (!currentEvent) return;

    if (accept) {
      // Ki·ªÉm tra ƒë·ªß ti·ªÅn kh√¥ng
      const hasEnoughChrono = !currentEvent.cost.chronoCoin || gameState.chronoCoin >= currentEvent.cost.chronoCoin;
      const hasEnoughMat = !currentEvent.cost.matCoin || gameState.matCoin >= currentEvent.cost.matCoin;

      if (hasEnoughChrono && hasEnoughMat) {
        setGameState(prev => ({
          ...prev,
          chronoCoin: prev.chronoCoin - (currentEvent.cost.chronoCoin || 0) + (currentEvent.effect.chronoCoin || 0),
          matCoin: prev.matCoin - (currentEvent.cost.matCoin || 0) + (currentEvent.effect.matCoin || 0),
          lifespan: Math.min(100, Math.max(0, prev.lifespan + (currentEvent.effect.lifespan || 0))),
          qualityOfLife: Math.min(100, Math.max(0, prev.qualityOfLife + (currentEvent.effect.qualityOfLife || 0))),
          energy: Math.min(100, Math.max(0, prev.energy + (currentEvent.effect.energy || 0))),
          knowledge: Math.min(100, Math.max(0, prev.knowledge + (currentEvent.effect.knowledge || 0)))
        }));

        // Particle effect
        createParticles(400, 300);
      } else {
        alert('Kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y!');
        return;
      }
    } else {
      // H·∫≠u qu·∫£ c·ªßa vi·ªác t·ª´ ch·ªëi
      if (currentEvent.type === 'mandatory') {
        // S·ª± ki·ªán b·∫Øt bu·ªôc - √°p d·ª•ng h·∫≠u qu·∫£ n·∫∑ng
        setGameState(prev => ({
          ...prev,
          lifespan: Math.max(0, prev.lifespan - 50),
          qualityOfLife: Math.max(0, prev.qualityOfLife - 30),
          energy: Math.max(0, prev.energy - 40),
          knowledge: Math.max(0, prev.knowledge - 20)
        }));
      } else {
        // S·ª± ki·ªán th∆∞·ªùng - √°p d·ª•ng h·∫≠u qu·∫£ nh·∫π
        setGameState(prev => ({
          ...prev,
          lifespan: Math.max(0, prev.lifespan - 10),
          qualityOfLife: Math.max(0, prev.qualityOfLife - 10),
          energy: Math.max(0, prev.energy - 15),
          knowledge: Math.max(0, prev.knowledge - 5)
        }));
      }
    }

    setCurrentEvent(null);
    setShowQuiz(false);
    setQuizAnswer(null);
  };

  const handleLotteryDraw = () => {
    if (!currentEvent) return;

    // T·∫°o k·∫øt qu·∫£ ng·∫´u nhi√™n
    const possibleEffects = [
      // Hi·ªáu ·ª©ng t√≠ch c·ª±c
      { lifespan: 20, message: "‚ú® Tu·ªïi th·ªç tƒÉng l√™n!" },
      { qualityOfLife: 25, message: "üè† Ch·∫•t l∆∞·ª£ng s·ªëng c·∫£i thi·ªán!" },
      { energy: 30, message: "‚ö° NƒÉng l∆∞·ª£ng tr√†n ƒë·∫ßy!" },
      { knowledge: 20, message: "üß† Ki·∫øn th·ª©c m·ªü r·ªông!" },
      { chronoCoin: 15, message: "üí∞ Nh·∫≠n ƒë∆∞·ª£c ChronoCoin!" },
      { matCoin: 20, message: "üíé Nh·∫≠n ƒë∆∞·ª£c MatCoin!" },
      
      // Hi·ªáu ·ª©ng ti√™u c·ª±c
      { lifespan: -15, message: "üíÄ Tu·ªïi th·ªç gi·∫£m ƒëi..." },
      { qualityOfLife: -20, message: "üòû Ch·∫•t l∆∞·ª£ng s·ªëng k√©m ƒëi..." },
      { energy: -25, message: "üò¥ C·∫£m th·∫•y m·ªát m·ªèi..." },
      { knowledge: -15, message: "ü§Ø Ki·∫øn th·ª©c b·ªã m·∫•t..." },
      { chronoCoin: -10, message: "üí∏ M·∫•t ChronoCoin..." },
      { matCoin: -12, message: "üí∏ M·∫•t MatCoin..." },
      
      // Hi·ªáu ·ª©ng h·ªón h·ª£p
      { lifespan: 10, energy: -10, message: "‚öñÔ∏è C√¢n b·∫±ng s·ª©c kh·ªèe v√† nƒÉng l∆∞·ª£ng" },
      { qualityOfLife: 15, knowledge: -8, message: "üé≠ ƒê√°nh ƒë·ªïi ch·∫•t l∆∞·ª£ng s·ªëng v√† ki·∫øn th·ª©c" },
      { chronoCoin: 8, matCoin: -5, message: "üîÑ Chuy·ªÉn ƒë·ªïi ti·ªÅn t·ªá" },
      { energy: 20, lifespan: -5, message: "‚ö° NƒÉng l∆∞·ª£ng tƒÉng nh∆∞ng tu·ªïi th·ªç gi·∫£m" }
    ];

    // Ch·ªçn ng·∫´u nhi√™n m·ªôt hi·ªáu ·ª©ng
    const randomEffect = possibleEffects[Math.floor(Math.random() * possibleEffects.length)];
    
    // √Åp d·ª•ng hi·ªáu ·ª©ng v√†o game state
    setGameState(prev => {
      const newState = { ...prev };
      
      // √Åp d·ª•ng t·ª´ng hi·ªáu ·ª©ng
      Object.entries(randomEffect).forEach(([key, value]) => {
        if (key !== 'message' && typeof value === 'number') {
          if (key === 'lifespan') {
            newState.lifespan = Math.max(0, Math.min(100, prev.lifespan + value));
          } else if (key === 'qualityOfLife') {
            newState.qualityOfLife = Math.max(0, Math.min(100, prev.qualityOfLife + value));
          } else if (key === 'energy') {
            newState.energy = Math.max(0, Math.min(100, prev.energy + value));
          } else if (key === 'knowledge') {
            newState.knowledge = Math.max(0, Math.min(100, prev.knowledge + value));
          } else if (key === 'chronoCoin') {
            newState.chronoCoin = Math.max(0, prev.chronoCoin + value);
          } else if (key === 'matCoin') {
            newState.matCoin = Math.max(0, prev.matCoin + value);
          }
        }
      });
      
      return newState;
    });

    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    const { message, ...effects } = randomEffect;
    const filteredEffects = Object.fromEntries(
      Object.entries(effects).filter(([_, value]) => typeof value === 'number')
    );
    setLotteryResult({
      show: true,
      effects: filteredEffects,
      message: message
    });

    // T·∫°o particle effect n·∫øu c√≥ hi·ªáu ·ª©ng t√≠ch c·ª±c
    const hasPositiveEffect = Object.entries(randomEffect).some(([key, value]) => 
      key !== 'message' && typeof value === 'number' && value > 0
    );
    
    if (hasPositiveEffect) {
      createParticles(400, 300);
    }

    // ·∫®n k·∫øt qu·∫£ sau 3 gi√¢y v√† ƒë√≥ng s·ª± ki·ªán
    setTimeout(() => {
      setLotteryResult({ show: false, effects: {}, message: '' });
      setCurrentEvent(null);
    }, 3000);
  };

  const handleQuizAnswer = (answerIndex: number) => {
    setQuizAnswer(answerIndex);
    
    if (currentEvent && answerIndex === currentEvent.quizAnswer) {
      // ƒê√∫ng - nh·∫≠n c·∫£ ChronoCoin v√† MatCoin
      setGameState(prev => ({
        ...prev,
        chronoCoin: prev.chronoCoin + 5,
        matCoin: prev.matCoin + 5
      }));
      createParticles(400, 300);
    } else {
      // Sai - m·∫•t t√†i nguy√™n ng·∫´u nhi√™n v√† m·∫•t ti·ªÅn ng·∫´u nhi√™n
      const randomResource = Math.floor(Math.random() * 4);
      const randomMoneyLoss = Math.floor(Math.random() * 6) + 10; // 10-15 ƒë∆°n v·ªã
      const randomCoinType = Math.random() < 0.5 ? 'chronoCoin' : 'matCoin';
      
      setGameState(prev => {
        const newState = { ...prev };
        
        // M·∫•t t√†i nguy√™n ng·∫´u nhi√™n
        switch (randomResource) {
          case 0:
            newState.lifespan = Math.max(0, prev.lifespan - 5);
            break;
          case 1:
            newState.qualityOfLife = Math.max(0, prev.qualityOfLife - 5);
            break;
          case 2:
            newState.energy = Math.max(0, prev.energy - 5);
            break;
          case 3:
            newState.knowledge = Math.max(0, prev.knowledge - 5);
            break;
        }
        
        // M·∫•t ti·ªÅn ng·∫´u nhi√™n
        if (randomCoinType === 'chronoCoin') {
          newState.chronoCoin = Math.max(0, prev.chronoCoin - randomMoneyLoss);
        } else {
          newState.matCoin = Math.max(0, prev.matCoin - randomMoneyLoss);
        }
        
        return newState;
      });
    }

    setTimeout(() => {
      setCurrentEvent(null);
      setShowQuiz(false);
      setQuizAnswer(null);
      setEliminatedOptions([]);
    }, 2000);
  };

  const getConsequenceInfo = (event: GameEvent) => {
    // H·∫≠u qu·∫£ cho s·ª± ki·ªán b·∫Øt bu·ªôc
    if (event.type === 'mandatory') {
      return {
        lifespan: 50,
        qualityOfLife: 30,
        energy: 40,
        knowledge: 20,
        text: "H·∫≠u qu·∫£ n·∫∑ng!"
      };
    }

    // H·∫≠u qu·∫£ ƒë·∫∑c bi·ªát d·ª±a tr√™n n·ªôi dung s·ª± ki·ªán
    const title = event.title.toLowerCase();
    const description = event.description.toLowerCase();

    // S·ª± ki·ªán y t·∫ø - h·∫≠u qu·∫£ nghi√™m tr·ªçng v·ªÅ s·ª©c kh·ªèe
    if (title.includes('thu·ªëc') || title.includes('b·ªánh') || title.includes('y t·∫ø') || 
        description.includes('thu·ªëc') || description.includes('b·ªánh')) {
      return {
        lifespan: 35,
        qualityOfLife: 10,
        energy: 20,
        knowledge: 0,
        text: "B·ªánh t·∫≠t nghi√™m tr·ªçng"
      };
    }

    // S·ª± ki·ªán nh√† ·ªü - h·∫≠u qu·∫£ v·ªÅ ch·∫•t l∆∞·ª£ng s·ªëng
    if (title.includes('nh√†') || title.includes('cƒÉn h·ªô') || title.includes('ch·ªó ·ªü') ||
        description.includes('nh√†') || description.includes('cƒÉn h·ªô')) {
      return {
        lifespan: 5,
        qualityOfLife: 30,
        energy: 10,
        knowledge: 0,
        text: "S·ªëng trong ƒëi·ªÅu ki·ªán k√©m"
      };
    }

    // S·ª± ki·ªán th·ª©c ƒÉn - h·∫≠u qu·∫£ v·ªÅ nƒÉng l∆∞·ª£ng v√† s·ª©c kh·ªèe
    if (title.includes('th·ª©c ƒÉn') || title.includes('ƒë·ªì ƒÉn') || title.includes('th·ª±c ph·∫©m') ||
        description.includes('th·ª©c ƒÉn') || description.includes('ƒë·ªì ƒÉn')) {
      return {
        lifespan: 15,
        qualityOfLife: 20,
        energy: 25,
        knowledge: 0,
        text: "Thi·∫øu dinh d∆∞·ª°ng"
      };
    }

    // S·ª± ki·ªán t·∫≠p th·ªÉ d·ª•c - h·∫≠u qu·∫£ v·ªÅ nƒÉng l∆∞·ª£ng
    if (title.includes('t·∫≠p') || title.includes('gym') || title.includes('th·ªÉ d·ª•c') ||
        description.includes('t·∫≠p') || description.includes('gym')) {
      return {
        lifespan: 10,
        qualityOfLife: 5,
        energy: 40,
        knowledge: 0,
        text: "Th·ªÉ l·ª±c y·∫øu"
      };
    }

    // S·ª± ki·ªán c√¥ng ngh·ªá - h·∫≠u qu·∫£ v·ªÅ ki·∫øn th·ª©c
    if (title.includes('c√¥ng ngh·ªá') || title.includes('m√°y t√≠nh') || title.includes('internet') ||
        description.includes('c√¥ng ngh·ªá') || description.includes('m√°y t√≠nh')) {
      return {
        lifespan: 0,
        qualityOfLife: 5,
        energy: 5,
        knowledge: 30,
        text: "L·∫°c h·∫≠u c√¥ng ngh·ªá"
      };
    }

    // S·ª± ki·ªán giao d·ªãch - h·∫≠u qu·∫£ c√¢n b·∫±ng
    if (title.includes('giao d·ªãch') || title.includes('ƒë·∫ßu t∆∞') || title.includes('kinh doanh') ||
        description.includes('giao d·ªãch') || description.includes('ƒë·∫ßu t∆∞')) {
      return {
        lifespan: 10,
        qualityOfLife: 15,
        energy: 10,
        knowledge: 15,
        text: "M·∫•t c∆° h·ªôi t√†i ch√≠nh"
      };
    }

    // H·∫≠u qu·∫£ m·∫∑c ƒë·ªãnh d·ª±a tr√™n lo·∫°i s·ª± ki·ªán
    switch (event.type) {
      case 'lifespan':
        return {
          lifespan: 25,
          qualityOfLife: 5,
          energy: 10,
          knowledge: 0,
          text: "S·ª©c kh·ªèe suy gi·∫£m"
        };
      
      case 'quality':
        return {
          lifespan: 5,
          qualityOfLife: 20,
          energy: 5,
          knowledge: 0,
          text: "Ch·∫•t l∆∞·ª£ng s·ªëng k√©m"
        };
      
      case 'energy':
        return {
          lifespan: 10,
          qualityOfLife: 5,
          energy: 30,
          knowledge: 5,
          text: "Ki·ªát s·ª©c"
        };
      
      case 'knowledge':
        return {
          lifespan: 0,
          qualityOfLife: 0,
          energy: 5,
          knowledge: 25,
          text: "Thi·∫øu ki·∫øn th·ª©c"
        };
      
      case 'trade':
        return {
          lifespan: 15,
          qualityOfLife: 15,
          energy: 10,
          knowledge: 10,
          text: "M·∫•t c∆° h·ªôi"
        };
      
      case 'quiz':
        return {
          lifespan: 0,
          qualityOfLife: 0,
          energy: 0,
          knowledge: 0,
          text: "Kh√¥ng c√≥ h·∫≠u qu·∫£"
        };
      
      case 'lottery':
        return {
          lifespan: 0,
          qualityOfLife: 0,
          energy: 0,
          knowledge: 0,
          text: "Kh√¥ng c√≥ h·∫≠u qu·∫£"
        };
      
      default:
        return {
          lifespan: 10,
          qualityOfLife: 10,
          energy: 10,
          knowledge: 5,
          text: "H·∫≠u qu·∫£ nh·∫π"
        };
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  // Power-up functions
  const useFiftyFifty = () => {
    if (gameState.powerUpsUsed.fiftyFifty || !currentEvent?.quizOptions) return;
    
    const correctAnswer = currentEvent.quizAnswer!;
    const wrongAnswers = currentEvent.quizOptions
      .map((_, index) => index)
      .filter(index => index !== correctAnswer);
    
    // Ch·ªçn 2 ƒë√°p √°n sai ƒë·ªÉ lo·∫°i b·ªè
    const toEliminate = wrongAnswers.slice(0, 2);
    setEliminatedOptions(toEliminate);
    
    setGameState(prev => ({
      ...prev,
      chronoCoin: prev.chronoCoin - 5,
      powerUpsUsed: { ...prev.powerUpsUsed, fiftyFifty: true }
    }));
  };

  const useAskAudience = () => {
    if (gameState.powerUpsUsed.askAudience || !currentEvent?.quizOptions) return;
    
    // Hi·ªÉn th·ªã modal v·ªõi k·∫øt qu·∫£ "kh√°n gi·∫£"
    const correctAnswer = currentEvent.quizAnswer!;
    const audienceResults = currentEvent.quizOptions.map((_, index) => {
      if (index === correctAnswer) {
        return Math.floor(Math.random() * 20) + 50; // 50-70% cho ƒë√°p √°n ƒë√∫ng
      }
      return Math.floor(Math.random() * 30) + 10; // 10-40% cho ƒë√°p √°n sai
    });
    
    // Normalize ƒë·ªÉ t·ªïng = 100%
    const total = audienceResults.reduce((sum, val) => sum + val, 0);
    const normalizedResults = audienceResults.map(val => Math.round((val / total) * 100));
    
    // Hi·ªÉn th·ªã modal v·ªõi k·∫øt qu·∫£
    setModalState({
      show: true,
      type: 'askAudience',
      data: {
        results: normalizedResults,
        options: currentEvent.quizOptions
      }
    });
    
    setGameState(prev => ({
      ...prev,
      matCoin: prev.matCoin - 10,
      powerUpsUsed: { ...prev.powerUpsUsed, askAudience: true }
    }));
  };

  const usePhoneFriend = () => {
    if (gameState.powerUpsUsed.phoneFriend || !currentEvent?.quizOptions) return;
    
    const correctAnswer = currentEvent.quizAnswer!;
    const correctLetter = String.fromCharCode(65 + correctAnswer);
    
    // 80% chance ƒë∆∞a ra ƒë√°p √°n ƒë√∫ng
    const isCorrect = Math.random() < 0.8;
    const suggestedAnswer = isCorrect ? correctLetter : 
      String.fromCharCode(65 + Math.floor(Math.random() * currentEvent.quizOptions.length));
    
    // Hi·ªÉn th·ªã modal v·ªõi g·ª£i √Ω t·ª´ b·∫°n
    setModalState({
      show: true,
      type: 'phoneFriend',
      data: {
        suggestedAnswer,
        isCorrect,
        correctAnswer: correctLetter
      }
    });
    
    setGameState(prev => ({
      ...prev,
      chronoCoin: prev.chronoCoin - 8,
      powerUpsUsed: { ...prev.powerUpsUsed, phoneFriend: true }
    }));
  };

  const useSwitchQuestion = () => {
    if (gameState.powerUpsUsed.switchQuestion) return;
    
    // Ch·ªçn c√¢u h·ªèi m·ªõi
    const randomQuiz = quizQuestions[Math.floor(Math.random() * quizQuestions.length)];
    const newQuizEvent: GameEvent = {
      id: randomQuiz.id,
      title: `üß† ${randomQuiz.category}`,
      description: 'Tr·∫£ l·ªùi ƒë√∫ng ƒë·ªÉ nh·∫≠n coin!',
      type: 'quiz',
      cost: {},
      effect: {},
      quizQuestion: randomQuiz.question,
      quizOptions: randomQuiz.options,
      quizAnswer: randomQuiz.answer
    };
    
    setCurrentEvent(newQuizEvent);
    setEliminatedOptions([]);
    
    setGameState(prev => ({
      ...prev,
      matCoin: prev.matCoin - 15,
      powerUpsUsed: { ...prev.powerUpsUsed, switchQuestion: true }
    }));
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 pt-20">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-8"
        >
          <h1 className="text-4xl md:text-6xl font-bold text-white mb-4">
            Th·ªùi ƒê·∫°i Ti·ªÅn T·ªá K√©p
          </h1>
          <div className="w-24 h-1 bg-gradient-to-r from-yellow-500 to-blue-500 mx-auto mb-6"></div>
          <p className="text-xl text-slate-300 max-w-4xl mx-auto leading-relaxed">
            S·ªëng v√† S·ªü H·ªØu - Qu·∫£n l√Ω ChronoCoin v√† MatCoin ƒë·ªÉ c√¢n b·∫±ng gi·ªØa s·ª± s·ªëng v√† ch·∫•t l∆∞·ª£ng cu·ªôc s·ªëng
          </p>
        </motion.div>

        {/* Game Controls */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex justify-center gap-4 mb-8"
        >
          {!gameState.gameActive && !gameState.gameEnded && (
            <div className="flex gap-4">
              <motion.button
                onClick={startGame}
                className="bg-green-600 hover:bg-green-700 text-white px-8 py-3 rounded-lg font-semibold flex items-center gap-2"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <Play className="w-5 h-5" />
                B·∫Øt ƒë·∫ßu Game
              </motion.button>
              
              <motion.button
                onClick={() => setShowRules(true)}
                className="bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 rounded-lg font-semibold flex items-center gap-2"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                Lu·∫≠t ch∆°i
              </motion.button>
            </div>
          )}
          
          {(gameState.gameActive || gameState.gameEnded) && (
            <motion.button
              onClick={resetGame}
              className="bg-gray-600 hover:bg-gray-700 text-white px-8 py-3 rounded-lg font-semibold flex items-center gap-2"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <RotateCcw className="w-5 h-5" />
              Ch∆°i l·∫°i
            </motion.button>
          )}
        </motion.div>

        {/* Game Stats - 4 T√†i nguy√™n */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="grid md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8"
        >
          {/* ChronoCoin */}
          <div className="bg-white/10 backdrop-blur-sm rounded-xl p-4 border border-yellow-500/30">
            <div className="flex items-center gap-2 mb-2">
              <Clock className="w-5 h-5 text-yellow-400" />
              <span className="text-yellow-400 font-semibold text-sm">ChronoCoin</span>
            </div>
            <div className="text-xl font-bold text-white">{gameState.chronoCoin}</div>
            <div className="text-xs text-slate-300">Th·ªùi gian s·ªëng</div>
          </div>

          {/* MatCoin */}
          <div className="bg-white/10 backdrop-blur-sm rounded-xl p-4 border border-blue-500/30">
            <div className="flex items-center gap-2 mb-2">
              <Coins className="w-5 h-5 text-blue-400" />
              <span className="text-blue-400 font-semibold text-sm">MatCoin</span>
            </div>
            <div className="text-xl font-bold text-white">{gameState.matCoin}</div>
            <div className="text-xs text-slate-300">V·∫≠t ch·∫•t</div>
          </div>

          {/* Lifespan */}
          <div className="bg-white/10 backdrop-blur-sm rounded-xl p-4 border border-red-500/30">
            <div className="flex items-center gap-2 mb-2">
              <Heart className="w-5 h-5 text-red-400" />
              <span className="text-red-400 font-semibold text-sm">Tu·ªïi th·ªç</span>
            </div>
            <div className="text-xl font-bold text-white">{Math.floor(gameState.lifespan)}%</div>
            <Progress.Root className="relative overflow-hidden bg-slate-700 rounded-full w-full h-2 mt-2">
              <Progress.Indicator
                className={`w-full h-full transition-all duration-300 ${gameState.lifespan < 20 ? 'bg-red-600 animate-pulse' : 'bg-red-500'}`}
                style={{ transform: `translateX(-${100 - gameState.lifespan}%)` }}
              />
            </Progress.Root>
          </div>

          {/* Quality of Life */}
          <div className="bg-white/10 backdrop-blur-sm rounded-xl p-4 border border-green-500/30">
            <div className="flex items-center gap-2 mb-2">
              <Zap className="w-5 h-5 text-green-400" />
              <span className="text-green-400 font-semibold text-sm">Ch·∫•t l∆∞·ª£ng s√¥ÃÅng</span>
            </div>
            <div className="text-xl font-bold text-white">{Math.floor(gameState.qualityOfLife)}%</div>
            <Progress.Root className="relative overflow-hidden bg-slate-700 rounded-full w-full h-2 mt-2">
              <Progress.Indicator
                className={`w-full h-full transition-all duration-300 ${gameState.qualityOfLife < 20 ? 'bg-green-600 animate-pulse' : 'bg-green-500'}`}
                style={{ transform: `translateX(-${100 - gameState.qualityOfLife}%)` }}
              />
            </Progress.Root>
          </div>
        </motion.div>

        {/* Additional Resources */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="grid md:grid-cols-2 gap-4 mb-8"
        >
          {/* Energy */}
          <div className="bg-white/10 backdrop-blur-sm rounded-xl p-4 border border-orange-500/30">
            <div className="flex items-center gap-2 mb-2">
              <Zap className="w-5 h-5 text-orange-400" />
              <span className="text-orange-400 font-semibold text-sm">NƒÉng l∆∞·ª£ng tinh th·∫ßn</span>
            </div>
            <div className="text-xl font-bold text-white">{Math.floor(gameState.energy)}%</div>
            <Progress.Root className="relative overflow-hidden bg-slate-700 rounded-full w-full h-2 mt-2">
              <Progress.Indicator
                className={`w-full h-full transition-all duration-300 ${gameState.energy < 20 ? 'bg-orange-600 animate-pulse' : 'bg-orange-500'}`}
                style={{ transform: `translateX(-${100 - gameState.energy}%)` }}
              />
            </Progress.Root>
          </div>

          {/* Knowledge */}
          <div className="bg-white/10 backdrop-blur-sm rounded-xl p-4 border border-purple-500/30">
            <div className="flex items-center gap-2 mb-2">
              <Heart className="w-5 h-5 text-purple-400" />
              <span className="text-purple-400 font-semibold text-sm">Ki·∫øn th·ª©c</span>
            </div>
            <div className="text-xl font-bold text-white">{Math.floor(gameState.knowledge)}%</div>
            <Progress.Root className="relative overflow-hidden bg-slate-700 rounded-full w-full h-2 mt-2">
              <Progress.Indicator
                className={`w-full h-full transition-all duration-300 ${gameState.knowledge < 20 ? 'bg-purple-600 animate-pulse' : 'bg-purple-500'}`}
                style={{ transform: `translateX(-${100 - gameState.knowledge}%)` }}
              />
            </Progress.Root>
          </div>
        </motion.div>

        {/* Timer */}
        {gameState.gameActive && (
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            className="text-center mb-8"
          >
            <div className="bg-white/10 backdrop-blur-sm rounded-xl p-4 border border-white/20 inline-block">
              <div className="text-3xl font-bold text-white">
                {formatTime(gameState.timeLeft)}
              </div>
              <div className="text-slate-300">Th·ªùi gian c√≤n l·∫°i</div>
              {!currentEvent && (
                <div className="text-xs text-yellow-300 mt-2">
                  ‚è≥ Nhi·ªám v·ª• s·∫Ω xu·∫•t hi·ªán s·ªõm...
                </div>
              )}
            </div>
          </motion.div>
        )}

        {/* Current Event - Inline Display */}
        <AnimatePresence>
          {currentEvent && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="mb-8"
            >
              <div className="bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/20">
                <div className="text-center mb-6">
                  <h3 className="text-2xl font-bold text-white mb-2">
                    {currentEvent.title}
                  </h3>
                  <p className="text-slate-300 leading-relaxed">
                    {currentEvent.description}
                  </p>
                </div>

                {currentEvent.type === 'lottery' ? (
                  <div className="space-y-4">
                    <div className="text-center">
                      <div className="text-6xl mb-4">üé≤</div>
                      <p className="text-lg text-slate-300 mb-6">
                        B·∫°n c√≥ mu·ªën th·ª≠ v·∫≠n may kh√¥ng? K·∫øt qu·∫£ c√≥ th·ªÉ l√† c∆° h·ªôi ho·∫∑c h√¨nh ph·∫°t!
                      </p>
                    </div>
                    
                    <div className="flex gap-4">
                      <motion.button
                        onClick={handleLotteryDraw}
                        className="flex-1 bg-purple-600 hover:bg-purple-700 text-white py-3 rounded-lg font-semibold"
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                      >
                        üé≤ B·ªëc 1 qu·∫ª
                      </motion.button>
                      <motion.button
                        onClick={() => {
                          setCurrentEvent(null);
                          setLotteryResult({ show: false, effects: {}, message: '' });
                        }}
                        className="flex-1 bg-gray-600 hover:bg-gray-700 text-white py-3 rounded-lg font-semibold"
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                      >
                        ‚ùå Kh√¥ng b·ªëc
                      </motion.button>
                    </div>
                  </div>
                ) : currentEvent.type === 'quiz' && showQuiz ? (
                  <div className="space-y-4">
                    <div className="text-lg font-semibold text-white mb-4">
                      {currentEvent.quizQuestion}
                    </div>
                    
                    {/* Power-ups */}
                    <div className="flex flex-wrap gap-2 mb-4">
                      <motion.button
                        onClick={useFiftyFifty}
                        disabled={gameState.powerUpsUsed.fiftyFifty || gameState.chronoCoin < 5}
                        className={`px-3 py-1 rounded-full text-xs font-semibold ${
                          gameState.powerUpsUsed.fiftyFifty || gameState.chronoCoin < 5
                            ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                            : 'bg-yellow-500 hover:bg-yellow-600 text-white'
                        }`}
                        whileHover={{ scale: 1.05 }}
                      >
                        50/50 (5 ChronoCoin)
                      </motion.button>
                      
                      <motion.button
                        onClick={useAskAudience}
                        disabled={gameState.powerUpsUsed.askAudience || gameState.matCoin < 10}
                        className={`px-3 py-1 rounded-full text-xs font-semibold ${
                          gameState.powerUpsUsed.askAudience || gameState.matCoin < 10
                            ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                            : 'bg-blue-500 hover:bg-blue-600 text-white'
                        }`}
                        whileHover={{ scale: 1.05 }}
                      >
                        H·ªèi kh√°n gi·∫£ (10 MatCoin)
                      </motion.button>
                      
                      <motion.button
                        onClick={usePhoneFriend}
                        disabled={gameState.powerUpsUsed.phoneFriend || gameState.chronoCoin < 8}
                        className={`px-3 py-1 rounded-full text-xs font-semibold ${
                          gameState.powerUpsUsed.phoneFriend || gameState.chronoCoin < 8
                            ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                            : 'bg-green-500 hover:bg-green-600 text-white'
                        }`}
                        whileHover={{ scale: 1.05 }}
                      >
                        G·ªçi b·∫°n (8 ChronoCoin)
                      </motion.button>
                      
                      <motion.button
                        onClick={useSwitchQuestion}
                        disabled={gameState.powerUpsUsed.switchQuestion || gameState.matCoin < 15}
                        className={`px-3 py-1 rounded-full text-xs font-semibold ${
                          gameState.powerUpsUsed.switchQuestion || gameState.matCoin < 15
                            ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                            : 'bg-purple-500 hover:bg-purple-600 text-white'
                        }`}
                        whileHover={{ scale: 1.05 }}
                      >
                        ƒê·ªïi c√¢u h·ªèi (15 MatCoin)
                      </motion.button>
                    </div>
                    
                    <div className="space-y-2">
                      {currentEvent.quizOptions?.map((option, index) => (
                        <motion.button
                          key={index}
                          onClick={() => handleQuizAnswer(index)}
                          disabled={quizAnswer !== null || eliminatedOptions.includes(index)}
                          className={`w-full p-3 rounded-lg text-left transition-all ${
                            eliminatedOptions.includes(index)
                              ? 'bg-gray-600 text-gray-400 cursor-not-allowed opacity-50'
                              : quizAnswer === index
                                ? quizAnswer === currentEvent.quizAnswer
                                  ? 'bg-green-500 text-white'
                                  : 'bg-red-500 text-white'
                                : 'bg-white/20 hover:bg-white/30 text-white border border-white/30'
                          }`}
                          whileHover={{ scale: eliminatedOptions.includes(index) ? 1 : 1.02 }}
                          whileTap={{ scale: eliminatedOptions.includes(index) ? 1 : 0.98 }}
                        >
                          {option}
                        </motion.button>
                      ))}
                    </div>
                    {quizAnswer !== null && (
                      <div className="text-center mt-4">
                        {quizAnswer === currentEvent.quizAnswer ? (
                          <div className="text-green-400 font-semibold">
                            ‚úÖ ƒê√∫ng! +5 ChronoCoin +5 MatCoin
                          </div>
                        ) : (
                          <div className="text-red-400 font-semibold">
                            ‚ùå Sai! M·∫•t t√†i nguy√™n v√† ti·ªÅn ng·∫´u nhi√™n
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="space-y-4">
                    {/* Th√¥ng tin chi ph√≠ v√† h·∫≠u qu·∫£ */}
                    <div className="grid md:grid-cols-2 gap-4">
                      {/* Chi ph√≠ khi mua */}
                      <div className="bg-green-500/20 border border-green-500/30 rounded-lg p-4">
                        <h4 className="text-green-400 font-semibold mb-2">‚úÖ Khi Mua:</h4>
                        <div className="space-y-1 text-sm">
                          {currentEvent.cost.chronoCoin && (
                            <div className="text-yellow-300">
                              üí∞ Chi ph√≠: {currentEvent.cost.chronoCoin} ChronoCoin
                            </div>
                          )}
                          {currentEvent.cost.matCoin && (
                            <div className="text-blue-300">
                              üí∞ Chi ph√≠: {currentEvent.cost.matCoin} MatCoin
                            </div>
                          )}
                          {currentEvent.effect.lifespan && (
                            <div className="text-red-300">
                              ‚ù§Ô∏è Tu·ªïi th·ªç: {currentEvent.effect.lifespan > 0 ? '+' : ''}{currentEvent.effect.lifespan}%
                            </div>
                          )}
                          {currentEvent.effect.qualityOfLife && (
                            <div className="text-green-300">
                              ‚ö° Ch·∫•t l∆∞·ª£ng s·ªëng: {currentEvent.effect.qualityOfLife > 0 ? '+' : ''}{currentEvent.effect.qualityOfLife}%
                            </div>
                          )}
                          {currentEvent.effect.energy && (
                            <div className="text-orange-300">
                              üîã NƒÉng l∆∞·ª£ng: {currentEvent.effect.energy > 0 ? '+' : ''}{currentEvent.effect.energy}%
                            </div>
                          )}
                          {currentEvent.effect.knowledge && (
                            <div className="text-purple-300">
                              üß† Ki·∫øn th·ª©c: {currentEvent.effect.knowledge > 0 ? '+' : ''}{currentEvent.effect.knowledge}%
                            </div>
                          )}
                          {currentEvent.effect.chronoCoin && (
                            <div className="text-yellow-300">
                              üí∞ ChronoCoin: +{currentEvent.effect.chronoCoin}
                            </div>
                          )}
                          {currentEvent.effect.matCoin && (
                            <div className="text-blue-300">
                              üí∞ MatCoin: +{currentEvent.effect.matCoin}
                            </div>
                          )}
                        </div>
                      </div>

                      {/* H·∫≠u qu·∫£ khi t·ª´ ch·ªëi */}
                      <div className="bg-red-500/20 border border-red-500/30 rounded-lg p-4">
                        <h4 className="text-red-400 font-semibold mb-2">‚ùå Khi T·ª´ Ch·ªëi:</h4>
                        {(() => {
                          const consequence = getConsequenceInfo(currentEvent);
                          return (
                            <div className="space-y-1 text-sm">
                              <div className="text-red-300 font-medium mb-2">{consequence.text}</div>
                              {consequence.lifespan > 0 && (
                                <div className="text-red-300">
                                  ‚ù§Ô∏è Tu·ªïi th·ªç: -{consequence.lifespan}%
                                </div>
                              )}
                              {consequence.qualityOfLife > 0 && (
                                <div className="text-red-300">
                                  ‚ö° Ch·∫•t l∆∞·ª£ng s·ªëng: -{consequence.qualityOfLife}%
                                </div>
                              )}
                              {consequence.energy > 0 && (
                                <div className="text-red-300">
                                  üîã NƒÉng l∆∞·ª£ng: -{consequence.energy}%
                                </div>
                              )}
                              {consequence.knowledge > 0 && (
                                <div className="text-red-300">
                                  üß† Ki·∫øn th·ª©c: -{consequence.knowledge}%
                                </div>
                              )}
                              {consequence.lifespan === 0 && consequence.qualityOfLife === 0 && 
                               consequence.energy === 0 && consequence.knowledge === 0 && (
                                <div className="text-gray-400">
                                  Kh√¥ng c√≥ h·∫≠u qu·∫£
                                </div>
                              )}
                            </div>
                          );
                        })()}
                      </div>
                    </div>

                    {/* Buttons */}
                    <div className="flex gap-4">
                      <motion.button
                        onClick={() => handleEventChoice(true)}
                        className="flex-1 bg-green-600 hover:bg-green-700 text-white py-3 rounded-lg font-semibold"
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                      >
                        Mua
                      </motion.button>
                      <motion.button
                        onClick={() => handleEventChoice(false)}
                        className="flex-1 bg-red-600 hover:bg-red-700 text-white py-3 rounded-lg font-semibold"
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                      >
                        B·ªè qua
                      </motion.button>
                    </div>
                  </div>
                )}
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Game Over Modal */}
        <Dialog.Root open={gameState.gameEnded}>
          <Dialog.Portal>
            <Dialog.Overlay className="fixed inset-0 bg-black/50 z-50" />
            <Dialog.Content className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white rounded-2xl p-8 max-w-lg w-full mx-4 z-50">
              <div className="text-center">
                {gameState.gameWon ? (
                  <>
                    <Trophy className="w-16 h-16 text-yellow-500 mx-auto mb-4" />
                    <h2 className="text-3xl font-bold text-green-600 mb-4">
                      üéâ Ch√∫c m·ª´ng!
                    </h2>
                    <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
                      <p className="text-green-800 font-medium">
                        B·∫°n ƒë√£ chinh ph·ª•c h√†nh tr√¨nh ti·ªÅn t·ªá t∆∞∆°ng lai! Ti·ªÅn kh√¥ng ch·ªâ l√† h√†ng h√≥a, m√† l√† ch√¨a kh√≥a s·ª± s·ªëng.
                      </p>
                    </div>
                  </>
                ) : (
                  <>
                    <Trophy className="w-16 h-16 text-red-500 mx-auto mb-4" />
                    <h2 className="text-3xl font-bold text-red-600 mb-4">
                      Game Over!
                    </h2>
                    <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                      <p className="text-red-800 font-medium">
                        {gameState.lifespan <= 0 && "B·∫°n ƒë√£ h·∫øt tu·ªïi th·ªç!"}
                        {gameState.qualityOfLife <= 0 && "B·∫°n thi·∫øu v·∫≠t ch·∫•t c∆° b·∫£n!"}
                        {gameState.energy <= 0 && "B·∫°n ƒë√£ ki·ªát s·ª©c!"}
                        {gameState.knowledge <= 0 && "B·∫°n thi·∫øu qu·∫£n l√Ω ki·∫øn th·ª©c, d·∫´n ƒë·∫øn c√¥ l·∫≠p x√£ h·ªôi!"}
                        {gameState.timeLeft <= 0 && "H·∫øt th·ªùi gian!"}
                      </p>
                    </div>
                  </>
                )}
                
                <div className="space-y-2 mb-6">
                  <div className="text-lg text-slate-600">
                    Tu·ªïi th·ªç: <span className="font-bold text-red-500">{Math.floor(gameState.lifespan)}%</span>
                  </div>
                  <div className="text-lg text-slate-600">
                    Ch·∫•t l∆∞·ª£ng s·ªëng: <span className="font-bold text-green-500">{Math.floor(gameState.qualityOfLife)}%</span>
                  </div>
                  <div className="text-lg text-slate-600">
                    NƒÉng l∆∞·ª£ng: <span className="font-bold text-orange-500">{Math.floor(gameState.energy)}%</span>
                  </div>
                  <div className="text-lg text-slate-600">
                    Ki·∫øn th·ª©c: <span className="font-bold text-purple-500">{Math.floor(gameState.knowledge)}%</span>
                  </div>
                  <div className="text-lg text-slate-600">
                    ChronoCoin: <span className="font-bold text-yellow-500">{gameState.chronoCoin}</span>
                  </div>
                  <div className="text-lg text-slate-600">
                    MatCoin: <span className="font-bold text-blue-500">{gameState.matCoin}</span>
                  </div>
                  <div className="text-lg text-slate-600">
                    ƒêi·ªÉm s·ªë: <span className="font-bold text-indigo-500">{gameState.score}</span>
                  </div>
                </div>
                
                {gameState.gameWon ? (
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                    <p className="text-blue-800 font-medium">
                      üöÄ Kh√°m ph√° th√™m v·ªÅ t∆∞∆°ng lai ti·ªÅn t·ªá t·∫°i trang "Ti·ªÅn trong t∆∞∆°ng lai"!
                    </p>
                  </div>
                ) : (
                  <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
                    <p className="text-yellow-800 font-medium">
                      üìö H·ªçc th√™m t·ª´ trang "L·ªãch s·ª≠ ti·ªÅn t·ªá" ƒë·ªÉ c·∫£i thi·ªán k·ªπ nƒÉng qu·∫£n l√Ω!
                    </p>
                  </div>
                )}
                
                <motion.button
                  onClick={resetGame}
                  className="bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 rounded-lg font-semibold"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  Ch∆°i l·∫°i
                </motion.button>
              </div>
            </Dialog.Content>
          </Dialog.Portal>
        </Dialog.Root>

        {/* Particles */}
        <AnimatePresence>
          {particles.map((particle) => (
            <motion.div
              key={particle.id}
              initial={{ opacity: 1, scale: 1, x: particle.x, y: particle.y }}
              animate={{ 
                opacity: 0, 
                scale: 0, 
                x: particle.x + (Math.random() - 0.5) * 200,
                y: particle.y + (Math.random() - 0.5) * 200
              }}
              exit={{ opacity: 0 }}
              transition={{ duration: 1 }}
              className="fixed pointer-events-none z-40"
            >
              <Coins className="w-4 h-4 text-yellow-500" />
            </motion.div>
          ))}
        </AnimatePresence>

        {/* Lottery Result Modal */}
        <AnimatePresence>
          {lotteryResult.show && (
            <motion.div
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.8 }}
              className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
            >
              <motion.div
                initial={{ y: 50 }}
                animate={{ y: 0 }}
                className="bg-gradient-to-br from-purple-900 to-indigo-900 rounded-2xl p-8 max-w-md mx-4 text-center"
              >
                <div className="text-6xl mb-4">üé≤</div>
                <h3 className="text-2xl font-bold text-white mb-4">K·∫øt qu·∫£ b·ªëc qu·∫ª!</h3>
                
                <div className="text-lg text-slate-300 mb-6">
                  {lotteryResult.message}
                </div>
                
                <div className="space-y-2 mb-6">
                  {Object.entries(lotteryResult.effects).map(([key, value]) => {
                    if (key === 'message' || typeof value !== 'number') return null;
                    
                    const isPositive = value > 0;
                    const icon = key === 'lifespan' ? '‚ù§Ô∏è' : 
                               key === 'qualityOfLife' ? '‚ö°' :
                               key === 'energy' ? 'üîã' :
                               key === 'knowledge' ? 'üß†' :
                               key === 'chronoCoin' ? 'üí∞' : 'üíé';
                    
                    const label = key === 'lifespan' ? 'Tu·ªïi th·ªç' :
                                 key === 'qualityOfLife' ? 'Ch·∫•t l∆∞·ª£ng s·ªëng' :
                                 key === 'energy' ? 'NƒÉng l∆∞·ª£ng' :
                                 key === 'knowledge' ? 'Ki·∫øn th·ª©c' :
                                 key === 'chronoCoin' ? 'ChronoCoin' : 'MatCoin';
                    
                    return (
                      <div key={key} className={`text-lg font-semibold ${
                        isPositive ? 'text-green-400' : 'text-red-400'
                      }`}>
                        {icon} {label}: {isPositive ? '+' : ''}{value}
                        {key === 'lifespan' || key === 'qualityOfLife' || key === 'energy' || key === 'knowledge' ? '%' : ''}
                      </div>
                    );
                  })}
                </div>
                
                <div className="text-sm text-slate-400">
                  K·∫øt qu·∫£ s·∫Ω t·ª± ƒë·ªông ƒë√≥ng sau 3 gi√¢y...
                </div>
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Rules Modal */}
        <AnimatePresence>
          {showRules && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"
            >
              <motion.div
                initial={{ scale: 0.8, y: 50 }}
                animate={{ scale: 1, y: 0 }}
                exit={{ scale: 0.8, y: 50 }}
                className="bg-gradient-to-br from-slate-900 to-blue-900 rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto"
              >
                {/* Header */}
                <div className="sticky top-0 bg-gradient-to-r from-blue-600 to-purple-600 p-6 rounded-t-2xl">
                  <div className="flex justify-between items-center">
                    <h2 className="text-2xl font-bold text-white flex items-center gap-3">
                      <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      Lu·∫≠t Ch∆°i - Th·ªùi ƒê·∫°i Ti·ªÅn T·ªá K√©p
                    </h2>
                    <motion.button
                      onClick={() => setShowRules(false)}
                      className="text-white hover:text-gray-300 transition-colors"
                      whileHover={{ scale: 1.1 }}
                      whileTap={{ scale: 0.9 }}
                    >
                      <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </motion.button>
                  </div>
                </div>

                {/* Content */}
                <div className="p-6 space-y-6">
                  {/* M√¥ t·∫£ Game */}
                  <div className="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
                    <h3 className="text-xl font-semibold text-blue-400 mb-3 flex items-center gap-2">
                      <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                      </svg>
                      M√¥ t·∫£ Game
                    </h3>
                    <div className="text-slate-300 space-y-2">
                      <p><strong className="text-white">B·ªëi c·∫£nh:</strong> NƒÉm 2100, trong m·ªôt x√£ h·ªôi gi·∫£ t∆∞·ªüng n∆°i ti·ªÅn t·ªá ƒë·ªãnh nghƒ©a m·ªçi kh√≠a c·∫°nh cu·ªôc s·ªëng.</p>
                      <p><strong className="text-white">M·ª•c ti√™u:</strong> Ng∆∞·ªùi ch∆°i l√† m·ªôt c√¥ng d√¢n ph·∫£i qu·∫£n l√Ω t√†i nguy√™n ƒë·ªÉ "s·ªëng s√≥t" v√† "th·ªãnh v∆∞·ª£ng" trong 3-5 ph√∫t.</p>
                      <p><strong className="text-white">C∆° ch·∫ø:</strong> C√°c k·ªãch b·∫£n t√¨nh hu·ªëng ng·∫´u nhi√™n s·∫Ω xu·∫•t hi·ªán, y√™u c·∫ßu quy·∫øt ƒë·ªãnh chi ti√™u ChronoCoin ho·∫∑c MatCoin.</p>
                      <p><strong className="text-white">Nhi·ªám v·ª•:</strong> Th·ªânh tho·∫£ng, nhi·ªám v·ª• quiz s·∫Ω xu·∫•t hi·ªán ƒë·ªÉ ki·∫øm th√™m ti·ªÅn, v√† ng∆∞·ªùi ch∆°i c√≥ th·ªÉ d√πng power-ups ƒë·ªÉ h·ªó tr·ª£.</p>
                    </div>
                  </div>

                  {/* T√†i Nguy√™n Qu·∫£n L√Ω */}
                  <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-4">
                    <h3 className="text-xl font-semibold text-green-400 mb-3 flex items-center gap-2">
                      <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                      </svg>
                      T√†i Nguy√™n Qu·∫£n L√Ω
                    </h3>
                    <div className="grid md:grid-cols-2 gap-4">
                      <div className="space-y-3">
                        <div className="bg-red-500/20 border border-red-500/30 rounded-lg p-3">
                          <h4 className="text-red-400 font-semibold flex items-center gap-2">
                            ‚ù§Ô∏è Lifespan (Th·ªùi Gian S·ªëng)
                          </h4>
                          <p className="text-slate-300 text-sm">ƒê·∫°i di·ªán cho s·ª©c kh·ªèe v√† tu·ªïi th·ªç. Gi·∫£m do tu·ªïi t√°c ho·∫∑c b·ªánh t·∫≠t. Mua b·∫±ng ChronoCoin.</p>
                        </div>
                        <div className="bg-green-500/20 border border-green-500/30 rounded-lg p-3">
                          <h4 className="text-green-400 font-semibold flex items-center gap-2">
                            ‚ö° Quality of Life (Ch·∫•t L∆∞·ª£ng Cu·ªôc S·ªëng)
                          </h4>
                          <p className="text-slate-300 text-sm">ƒê·∫°i di·ªán cho nhu c·∫ßu c∆° b·∫£n (th·ª©c ƒÉn, nh√† ·ªü). Gi·∫£m do thi·∫øu v·∫≠t ch·∫•t. Mua b·∫±ng MatCoin.</p>
                        </div>
                      </div>
                      <div className="space-y-3">
                        <div className="bg-orange-500/20 border border-orange-500/30 rounded-lg p-3">
                          <h4 className="text-orange-400 font-semibold flex items-center gap-2">
                            üîã Energy (NƒÉng L∆∞·ª£ng)
                          </h4>
                          <p className="text-slate-300 text-sm">ƒê·∫°i di·ªán cho s·ª©c l·ª±c h√†ng ng√†y (l√†m vi·ªác, di chuy·ªÉn). Gi·∫£m do lao ƒë·ªông ho·∫∑c stress. Mua b·∫±ng ChronoCoin.</p>
                        </div>
                        <div className="bg-purple-500/20 border border-purple-500/30 rounded-lg p-3">
                          <h4 className="text-purple-400 font-semibold flex items-center gap-2">
                            üß† Knowledge (Ki·∫øn Th·ª©c)
                          </h4>
                          <p className="text-slate-300 text-sm">ƒê·∫°i di·ªán cho h·ªçc h·ªèi v√† k·∫øt n·ªëi x√£ h·ªôi. Gi·∫£m do c√¥ l·∫≠p ho·∫∑c thi·∫øu c·∫≠p nh·∫≠t. Mua b·∫±ng MatCoin.</p>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* ƒêi·ªÅu Ki·ªán Th·∫Øng/Thua */}
                  <div className="bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-4">
                    <h3 className="text-xl font-semibold text-yellow-400 mb-3 flex items-center gap-2">
                      <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z" />
                      </svg>
                      ƒêi·ªÅu Ki·ªán Th·∫Øng/Thua
                    </h3>
                    <div className="grid md:grid-cols-2 gap-4">
                      <div className="bg-green-500/20 border border-green-500/30 rounded-lg p-3">
                        <h4 className="text-green-400 font-semibold mb-2">üèÜ Th·∫Øng</h4>
                        <ul className="text-slate-300 text-sm space-y-1">
                          <li>‚Ä¢ Ho√†n th√†nh timer (5 ph√∫t)</li>
                          <li>‚Ä¢ T·∫•t c·∫£ t√†i nguy√™n ƒë·ªÅu tr√™n 50%</li>
                          <li>‚Ä¢ T·ªïng ChronoCoin + MatCoin ƒë·∫°t √≠t nh·∫•t 60</li>
                          <li>‚Ä¢ Nh·∫≠n th√¥ng ƒëi·ªáp ch√∫c m·ª´ng v√† ƒëi·ªÉm s·ªë cao</li>
                        </ul>
                      </div>
                      <div className="bg-red-500/20 border border-red-500/30 rounded-lg p-3">
                        <h4 className="text-red-400 font-semibold mb-2">üíÄ Thua</h4>
                        <ul className="text-slate-300 text-sm space-y-1">
                          <li>‚Ä¢ B·∫•t k·ª≥ t√†i nguy√™n n√†o v·ªÅ 0</li>
                          <li>‚Ä¢ H·∫øt ti·ªÅn ƒë·ªÉ x·ª≠ l√Ω events b·∫Øt bu·ªôc</li>
                          <li>‚Ä¢ Nh·∫≠n th√¥ng ƒëi·ªáp th·∫•t b·∫°i v·ªõi l√Ω do c·ª• th·ªÉ</li>
                          <li>‚Ä¢ Khuy·∫øn kh√≠ch ch∆°i l·∫°i v√† h·ªçc th√™m</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  {/* Gameplay Chi Ti·∫øt */}
                  <div className="bg-purple-500/10 border border-purple-500/30 rounded-lg p-4">
                    <h3 className="text-xl font-semibold text-purple-400 mb-3 flex items-center gap-2">
                      <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                      </svg>
                      Gameplay Chi Ti·∫øt
                    </h3>
                    <div className="space-y-4">
                      <div className="bg-slate-800/50 rounded-lg p-3">
                        <h4 className="text-white font-semibold mb-2">üéÆ Kh·ªüi ƒê·∫ßu</h4>
                        <p className="text-slate-300 text-sm">Ng∆∞·ªùi ch∆°i b·∫Øt ƒë·∫ßu v·ªõi 30 ChronoCoin, 30 MatCoin, v√† t·∫•t c·∫£ t√†i nguy√™n ·ªü 100%. Dashboard hi·ªÉn th·ªã 4 progress bars v·ªõi animation.</p>
                      </div>
                      <div className="bg-slate-800/50 rounded-lg p-3">
                        <h4 className="text-white font-semibold mb-2">‚ö° Events (K·ªãch B·∫£n T√¨nh Hu·ªëng)</h4>
                        <p className="text-slate-300 text-sm">Ng·∫´u nhi√™n xu·∫•t hi·ªán m·ªói 10-20 gi√¢y. V√≠ d·ª•: "C∆° th·ªÉ m·ªát m·ªèi: Tr·∫£ 10 ChronoCoin ƒë·ªÉ tƒÉng Energy 20%?" v·ªõi l·ª±a ch·ªçn Mua ho·∫∑c B·ªè qua.</p>
                      </div>
                      <div className="bg-slate-800/50 rounded-lg p-3">
                        <h4 className="text-white font-semibold mb-2">üß† Nhi·ªám V·ª• Quiz</h4>
                        <p className="text-slate-300 text-sm">Xu·∫•t hi·ªán ng·∫´u nhi√™n t·ª´ 100 c√¢u h·ªèi v·ªÅ ti·ªÅn t·ªá v√† kinh t·∫ø. Tr·∫£ l·ªùi ƒë√∫ng: +5 ChronoCoin +5 MatCoin. Sai: M·∫•t t√†i nguy√™n ng·∫´u nhi√™n v√† ti·ªÅn.</p>
                      </div>
                    </div>
                  </div>

                  {/* Power-Ups */}
                  <div className="bg-indigo-500/10 border border-indigo-500/30 rounded-lg p-4">
                    <h3 className="text-xl font-semibold text-indigo-400 mb-3 flex items-center gap-2">
                      <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                      </svg>
                      Power-Ups
                    </h3>
                    <div className="grid md:grid-cols-2 gap-4">
                      <div className="space-y-3">
                        <div className="bg-yellow-500/20 border border-yellow-500/30 rounded-lg p-3">
                          <h4 className="text-yellow-400 font-semibold">50/50</h4>
                          <p className="text-slate-300 text-sm">Lo·∫°i b·ªè 2 ƒë√°p √°n sai. Chi ph√≠: 5 ChronoCoin. M·ªói game ch·ªâ d√πng 1 l·∫ßn.</p>
                        </div>
                        <div className="bg-blue-500/20 border border-blue-500/30 rounded-lg p-3">
                          <h4 className="text-blue-400 font-semibold">Ask the Audience</h4>
                          <p className="text-slate-300 text-sm">Hi·ªÉn th·ªã "b·ªè phi·∫øu gi·∫£" thi√™n v·ªÅ ƒë√°p √°n ƒë√∫ng. Chi ph√≠: 10 MatCoin.</p>
                        </div>
                      </div>
                      <div className="space-y-3">
                        <div className="bg-green-500/20 border border-green-500/30 rounded-lg p-3">
                          <h4 className="text-green-400 font-semibold">Phone a Friend</h4>
                          <p className="text-slate-300 text-sm">G·ª£i √Ω ƒë√°p √°n ƒë√∫ng v·ªõi x√°c su·∫•t 80%. Chi ph√≠: 8 ChronoCoin.</p>
                        </div>
                        <div className="bg-purple-500/20 border border-purple-500/30 rounded-lg p-3">
                          <h4 className="text-purple-400 font-semibold">Switch Question</h4>
                          <p className="text-slate-300 text-sm">Thay b·∫±ng c√¢u h·ªèi m·ªõi n·∫øu kh√≥. Chi ph√≠: 15 MatCoin.</p>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* C∆° h·ªôi hay H√¨nh ph·∫°t */}
                  <div className="bg-pink-500/10 border border-pink-500/30 rounded-lg p-4">
                    <h3 className="text-xl font-semibold text-pink-400 mb-3 flex items-center gap-2">
                      <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v13m0-13V6a2 2 0 112 2h-2zm0 0V5.5A2.5 2.5 0 109.5 8H12zm-7 4h14M5 12a2 2 0 110-4h14a2 2 0 110 4M5 12v7a2 2 0 002 2h10a2 2 0 002-2v-7" />
                      </svg>
                      C∆° h·ªôi hay H√¨nh ph·∫°t
                    </h3>
                    <div className="bg-slate-800/50 rounded-lg p-3">
                      <p className="text-slate-300 text-sm">
                        S·ª± ki·ªán ƒë·∫∑c bi·ªát v·ªõi c∆° ch·∫ø b·ªëc qu·∫ª ng·∫´u nhi√™n. Ch·ªçn "üé≤ B·ªëc 1 qu·∫ª" ƒë·ªÉ nh·∫≠n hi·ªáu ·ª©ng ng·∫´u nhi√™n (c√≥ th·ªÉ t√≠ch c·ª±c ho·∫∑c ti√™u c·ª±c) ho·∫∑c "‚ùå Kh√¥ng b·ªëc" ƒë·ªÉ tr√°nh r·ªßi ro.
                      </p>
                    </div>
                  </div>
                </div>

                {/* Footer */}
                <div className="sticky bottom-0 bg-gradient-to-r from-slate-800 to-slate-900 p-4 rounded-b-2xl border-t border-slate-700">
                  <div className="flex justify-center">
                    <motion.button
                      onClick={() => setShowRules(false)}
                      className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-semibold"
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      ƒê√£ hi·ªÉu, b·∫Øt ƒë·∫ßu ch∆°i!
                    </motion.button>
                  </div>
                </div>
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Modal cho Ask Audience v√† Phone Friend */}
        <Dialog.Root open={modalState.show} onOpenChange={(open) => {
          if (!open) {
            setModalState({ show: false, type: null, data: null });
          }
        }}>
          <Dialog.Portal>
            <Dialog.Overlay className="fixed inset-0 bg-black/50 z-50" />
            <Dialog.Content className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-slate-800 rounded-2xl p-6 max-w-md w-full mx-4 z-50 border border-slate-700">
              <Dialog.Title className="text-xl font-bold text-white mb-4">
                {modalState.type === 'askAudience' ? 'üé≠ K·∫øt qu·∫£ kh√°n gi·∫£' : 'üìû G·ª£i √Ω t·ª´ b·∫°n'}
              </Dialog.Title>
              
              {modalState.type === 'askAudience' && modalState.data && (
                <div className="space-y-3">
                  <p className="text-slate-300 mb-4">Kh√°n gi·∫£ ƒë√£ b√¨nh ch·ªçn:</p>
                  {modalState.data.results.map((result: number, index: number) => (
                    <div key={index} className="flex items-center gap-3">
                      <span className="text-white font-semibold w-8">
                        {String.fromCharCode(65 + index)}:
                      </span>
                      <div className="flex-1 bg-slate-700 rounded-full h-6 overflow-hidden">
                        <div 
                          className="h-full bg-gradient-to-r from-blue-500 to-blue-400 transition-all duration-1000 ease-out"
                          style={{ width: `${result}%` }}
                        />
                      </div>
                      <span className="text-white font-semibold w-12 text-right">
                        {result}%
                      </span>
                    </div>
                  ))}
                </div>
              )}
              
              {modalState.type === 'phoneFriend' && modalState.data && (
                <div className="space-y-4">
                  <div className="text-center">
                    <div className="text-6xl mb-4">üìû</div>
                    <p className="text-slate-300 mb-2">B·∫°n t√¥i n√≥i:</p>
                    <div className="bg-slate-700 rounded-lg p-4 border border-slate-600">
                      <p className="text-xl font-bold text-white">
                        "T√¥i nghƒ© ƒë√°p √°n l√†: <span className="text-yellow-400">{modalState.data.suggestedAnswer}</span>"
                      </p>
                    </div>
                    <p className="text-sm text-slate-400 mt-2">
                      {modalState.data.isCorrect ? '‚úÖ Tin t∆∞·ªüng b·∫°n n√†y!' : '‚ö†Ô∏è C√¢n nh·∫Øc k·ªπ nh√©!'}
                    </p>
                  </div>
                </div>
              )}
              
              <div className="flex justify-center mt-6">
                <Dialog.Close asChild>
                  <motion.button
                    className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-semibold"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    ƒê√£ hi·ªÉu
                  </motion.button>
                </Dialog.Close>
              </div>
            </Dialog.Content>
          </Dialog.Portal>
        </Dialog.Root>
      </div>
    </div>
  );
}
